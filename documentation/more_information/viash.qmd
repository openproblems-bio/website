---
title: Viash utilities
---

Viash has several commands/utilities/tools to help with developing components. These are the most common. 

You can check the viash [guide](https://viash.io/guide) or [reference](https://viash.io/reference/) for more in depth descriptions and more.

## Par and meta variables

More information can be found [here](https://viash.io/guide/component/variables.html) including the syntax for multiple languages.

When adding a method or metric to the OPv2 you will need to define the arguments in the config file. To help with local development you can add a viash placeholder code block to define these arguments. This code block strats with `## VIASH START` and ends with `## VIASH END`.

This makes it easier to run the script locally e.g. `python script.py`.

If you want to set your variables for local development add a viash code block either manually e.g.

```python
## VIASH START
par = {
  'input': 'file.txt',
  'output': 'output.txt'
}
## VIASH END
```

Everything that is in the `par` must be the same as what is defined in the `functionality.arguments` section of your `config.vsh.yaml`.

Or you can add all available variables by using the following command:

```bash
viash config inject path/to/config.vsh.yaml
```

Which will update your script in the correct laguage format with a code block similar to this:

```python
## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input': r'file.txt',
  'output': r'output.txt'
}
meta = {
  'functionality_name': r'example_python',
  'resources_dir': r'/tmp/viash_inject_example_python6207454802050445393',
  'executable': r'/tmp/viash_inject_example_python6207454802050445393/example_python',
  'config': r'/tmp/viash_inject_example_python6207454802050445393/.config.vsh.yaml',
  'temp_dir': r'/tmp',
  'cpus': int(r'123'),
  'memory_b': int(r'123'),
  'memory_kb': int(r'123'),
  'memory_mb': int(r'123'),
  'memory_gb': int(r'123'),
  'memory_tb': int(r'123'),
  'memory_pb': int(r'123')
}

## VIASH END
```

When you run your script using `viash run` the code block will be overwritten with the arguments provided at runtime.

::: {.callout-caution}
## update config file

If you want to add a new argument to your script, add it to the config `functionality.arguments` section first before adding it to the par in the viash code block. Or use the `injectt command` to update your script.
:::


## Use helper functions

visit [here](https://viash.io/guide/component/use-helper-functions.html) for more information.

You can create helper functions which can then be used in the different methods and metrics of the task. 

1. Create the helper script where you define functions that can be called e.g.
   
    ```python
    import shutil

    def copy_file(source, dest):
        print(f"Copying '{source}' to '{dest}'.")
        shutil.copyfile(source, dest) 
    ```

2. Add the helper script to the `functionality.resources` section of the viash config file of your method/metric e.g.
   
    ```yaml
    resources:
        - type: python_script
          path: script.py
        - path: helper.py
    ```

3. Import the helper function in your script e.g.
   
    ```python
    # import helper function
    source(paste0(meta$resources_dir, "/helper.R"))

    # copy file
    copy_file(par$input, par$output)

    ```

## viash config view

More information [here](https://viash.io/reference/cli/config_view.html).

When using the `__merge__` it can be possbile to lose oversight of the whole config file. You can view how the config file is rendered for viash by using the following command:

```bash
viash config view path/to/config.vsh.yaml
```