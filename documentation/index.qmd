---
title: Documentation
order: 1
listing:
  id: chapters
  template: ../style/listing.ejs
  type: default
  contents: "./*/index.qmd"
execute:
  echo: false
css: "milestones.css"
---

Welcome to the OpenProblems documentation!

OpenProblems is a framework for machine learning scientists, computational biologists, and single-cell data analysts to benchmark and compare single-cell omics methods on a variety of tasks. We believe that improving reproducibility and transparency in research will accelerate progress in single-cell omics.

This documentation provides an overview of the framework and how to contribute to it. It is organized into the following chapters: 

:::{#chapters}
:::

We encourage everyone who uses OpenProblems to contribute to the framework in any way they can. This can include submitting a pull request to improve the documentation, answering queries on the issue tracker, investigating bugs, reviewing other developers' pull requests, or simply reporting issues and giving a "thumbs up" to relevant issues. 

One simple but important way to contribute is to spread the word about the library by referencing it from your blog and articles, linking to it from your website, or starring it on GitHub to show that you use it. This not only helps us gain more visibility but also encourages others to try out the library and contribute to it. 

[![](images/stargazers.png){width=500px}](https://github.com/openproblems-bio/openproblems/stargazers)

Finally, we want to emphasize that OpenProblems is an inclusive community and we expect all members to adhere to our [code of conduct](fundamentals/philosophy.qmd#inclusiveness). We hope that this documentation helps you get started with OpenProblems and we look forward to your contributions.


<!-- add timeline in D3 -->
## Timeline
:::{#timeline}

:::

:::{#benchmark}
:::


```{ojs requires}
ms = require('d3-milestones');
sb = require('@supabase/supabase-js');
```


```{ojs supabase_data}
supabase_url="https://bleficzaoyltozjjndha.supabase.co"
supabase_key="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJsZWZpY3phb3lsdG96ampuZGhhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjQyNDI2ODMsImV4cCI6MjAzOTgxODY4M30.fHtpJTveDUF1z07_k7FZX3wLy7bXpkYl5KyA5o_EuQY"
supabase = sb.createClient(supabase_url, supabase_key);

benchmarks = (await supabase
  .from('tasks')
  .select('first_release, name, task_name'))
  .data
  .filter(item => item.first_release !== null)
  .map(item => ({
    date: item.first_release,
    name: item.name,
    task_name: item.task_name.replace(/^task_/, ''),
    type: "benchmark",
    url: '../results/' + item.task_name.replace(/^task_/, ''),
    category: "benchmark"
  }));

// Add result link

timeline = (await supabase
  .from('timeline')
  .select('name, date, type'))
  .data
  .map(item => ({
    name: item.name,
    date: item.date,
    type: item.type,
    category: "timeline",
    textStyle: {
      color: item.type === 'event' ? '#d95f02' :
             item.type === 'milestone' ? '#1b9e77' :
             item.type === 'competition' ? '#e7298a' : 'default'
    }
  }));
  

combinedData = benchmarks.concat(timeline);

```


```{ojs timeline}

setTimeout(() => { 
  const benchmarkChart = ms('#benchmark')
    .mapping({
      'timestamp': 'date',
      'text': 'name',
    })
    .optimize(true)
    .parseTime('%Y-%m-%d')
    .aggregateBy('day')
    .render(combinedData);
}, 0);


// timelineChart = ms('#timeline')
// 	.mapping({
// 		'timestamp': 'date',
// 		'text': 'name'
// 	})
//   .optimize(true)
// 	.parseTime('%Y-%m-%d')
// 	.aggregateBy('day')
// 	.render(timeline);



```
