---
title: Add a metric
order: 60
engine: knitr
---

{{< include ../../_include/_clone_repo.qmd >}}
{{< include /_include/_evaluate_code.qmd >}}
{{< include /_include/_synchonize_tabs.qmd >}}

A metric is a quantitative measure used to evaluate the performance of the different methods in solving the specific task problem.

This guide will show you how to create a new [Viash](https://viash.io) component.
In the following we will show examples for both Python and R.
Note that the Label Projection task is used throughout the guide, so make sure to replace any occurrences of `"label_projection"` with your task of interest.

:::{.callout-tip}
Make sure you have followed the ["Getting started"](../fundamentals/getting_started.qmd) guide.
:::


## Step 1:  Create a new component

Use the `create_component` component to start creating a new metric.

::: {.panel-tabset}
## Python
```{bash}
viash run src/common/create_component/config.vsh.yaml -- \
  --task label_projection \
  --type metric \
  --name my_metric_py \
  --language python
```


This will create a new folder at `src/tasks/label_projection/metrics/my_metric_py` containing a Viash config and a script.

    src/tasks/label_projection/metric/my_metric_py
        ├── script.py                    Script for running the metric.
        ├── config.vsh.yaml              Config file for metric.
        └── ...                          Optional additional resources.

## R

```{bash}
viash run src/common/create_component/config.vsh.yaml -- \
  --task label_projection \
  --type metric \
  --name my_metric_r \
  --language r
```

This will create a new folder at `src/tasks/label_projection/metrics/my_metric_r` containing a Viash config and a script.

    src/tasks/label_projection/metrics/my_metric_r
        ├── script.R                     Script for running the metric.
        ├── config.vsh.yaml              Config file for metric.
        └── ...                          Optional additional resources.

:::

Change the `--name` to a unique name for your metric. It must match the regex `[a-z][a-z0-9_]*` (snakecase).

* A **config file** contains metadata of the component and the dependencies required to run it. In steps 2 and 3 we will fill in the required information.
* A **script** contains the code to run the metric. In step 4 we will edit the script. 

:::{.callout-tip}
Use the command `viash run src/common/create_component/config.vsh.yaml -- --help` to get information on all of the parameters if the `create_component` component.
:::

## Step 2: Fill in metadata


The [Viash config](https://viash.io/reference/config/) contains metadata of your metric, which script is used to run it, and the required dependencies. 

### Generated config file

This is what the `config.vsh.yaml` generated by the `create_component` component looks like:

:::{.panel-tabset}

### Python

<details><summary>Contents of `config.vsh.yaml`</summary>

````yaml
```{bash}
#| echo: false
#| output: asis
cat src/tasks/label_projection/metrics/my_metric_py/config.vsh.yaml
```
````

</details>

### R

<details><summary>Contents of `config.vsh.yaml`</summary>

````yaml
```{bash}
#| echo: false
#| output: asis
cat src/tasks/label_projection/metrics/my_metric_r/config.vsh.yaml
```
````

</details>

:::

### Required metadata fields

Please make sure that the following fields in the `functionality` and `functionality.info` sections in the config file are filled in. The metrics component can contain several metric values these are listed in the `functionality.info.metrics`.

<!-- TODO: think about how to make this listing easier on the eye -->

#### `functionality.name`

A unique identifier for the metric component. Must be written in snake case. Example: `my_new_metric`. This will be the same as the name given in the `--name` argument of the  `create_component` command above.


#### `functionality.info.metrics[]`

* `.name`: A unique identifier for the metric (if only 1 metric in the component can be the same as `functionality.name`). Must be written in snake case. Example: `my_new_metric`.

* `.pretty_name`: A label for the metric used for visualisations and documentation. Example: `"My new metric"`.

* `.summary`: A one sentence summary of the metric. Used for creating short overviews of the components in a task.

* `.description`: An explanation for how the metric works. Used for creating reference documentation of a task.

* `.reference`: A bibtex reference key to the paper where the metrics is used.

* `.documentation_url`: The url to the documentation of the metrics used.

* `.repository_url`: The repository url for the metrics used.

* `.min`: The minimum value of the metrics (`-inf` if there isn't a min).

* `.max`: The maximum value of the metrics (`+inf` if there isn't a max).

* `.maximize`: Set to `true` if a higher value is better and `false` if a lower value is better.

#### `__merge__`

The file specified in this field contains information regarding the input and output arguments of the component, as well as a unit test to ensure that the component is functioning properly. Normally you don't need to change this if you gave the right arguments to the `create_component` component.


## Step 3: Add dependencies

Each component has it's own set of dependencies, because different components might have conflicting dependencies.

In the platforms section of the config file update the `setup` definition that describes the packages that need to be installed in the Docker image and are required for your metric to run. Note that both `anndata~=0.8.0` and `pyyaml` are necessary Python package dependencies.

Please check out this [guide](https://viash.io/guide/component/add-dependencies.html) for more information on how to add extra package dependencies.

:::{.callout-note}
**Tip:** After making changes to the components dependencies, you will need to rebuild the docker container as follows:

```bash
viash run src/tasks/label_projection/metrics/my_metric_py/config.vsh.yaml -- \
  ---setup cachedbuild
```
<details><summary>Output</summary>
```{bash}
#| echo: false
viash run src/tasks/label_projection/metrics/my_metric_py/config.vsh.yaml -- \
  ---setup cachedbuild
```
</details>
:::


## Step 4: Edit script

A component's script typically has five sections:

1. Imports and libraries
2. Argument values
3. Read input data
4. Generate results
5. Write output data to file

### Generated script

This is what the script generated by the `create_component` component looks like:

:::{.panel-tabset}

### Python

<details><summary>Contents of `script.py`</summary>

````python
```{bash}
#| echo: false
#| output: asis
#| code-line-numbers: true
cat src/tasks/label_projection/metrics/my_metric_py/script.py
```
````

</details>

### R

<details><summary>Contents of `script.R`</summary>

````r
```{bash}
#| echo: false
#| output: asis
cat src/tasks/label_projection/metrics/my_metric_r/script.R
```
````

</details>

:::

### Required sections

#### Imports and libraries

In the top section of the script you can define which packages/libraries the metric needs. If you add a new or different package add the dependency to `config.vsh.yaml` in the `setup` field (see above).

#### Argument block

The [Viash code block](https://viash.io/reference/viash_code_block/) is designed to facilitate prototyping, by enabling you to execute directly by running `python script.py` (or `Rscript script.R` for R users). Note that anything between "VIASH START" and "VIASH END" will be removed and replaced with a CLI argument parser when the components are being built by Viash.

Here, the `par` dictionary contains all the `arguments` defined in the `config.vsh.yaml` file (including those from the defined `__merge__` file). When adding a `argument` in the `par` dict **also** add it to the `config.vsh.yaml` in the `arguments` section.

#### Read input data

This section reads any input AnnData files passed to the component.

#### Generate results

This is the most important section of your script, as it defines the core functionality provided by the component. It processes the input data to create results for the particular task at hand.


#### Write output data to file

The output stored in a AnnData object and then written to an `.h5ad` file. The format is specified by the API file specified in the `__merge__` field in the config file.

## Step 5: Try component

Your component's API file contains the necessary unit tests to check whether your component works and the output is in the correct format.

You can test your component by using the following command:

```bash
viash test src/tasks/label_projection/metrics/my_metric_py/config.vsh.yaml
```
<details>
  <summary>Output</summary>
```{bash}
#| echo: false
# use f1 instead of 'my_metric' because the script won't work.
# maybe copy a 'working' script here
viash test src/tasks/label_projection/metrics/f1/config.vsh.yaml
```
</details>

Visit ["Run tests"](run_tests.qmd) for more information on running unit tests and how to interpret common error messages.

You can also run your component on local files using the `viash run` command. For example:

```bash
viash run src/tasks/label_projection/metrics/my_metric_py/config.vsh.yaml -- \
  --input_prediction resources_test/label_projection/pancreas/knn.h5ad \
  --input_solution resources_test/label_projection/pancreas/solution.h5ad \
  --output output.h5ad
```

## Next steps

If your component works, please [create a pull request](../create_component/create_pull_request.qmd).
