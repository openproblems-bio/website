---
title: Add a metric
description: This guide will show you how to create a new Viash component.
order: 60
engine: knitr
page-navigation: true
---

{{< include ../../_include/_clone_repo_task_template.qmd >}}
{{< include /_include/_evaluate_code.qmd >}}

A metric is a quantitative measure used to evaluate the performance of the different methods in solving the specific task problem.

This guide will show you how to create a new [Viash](https://viash.io) component.
In the following we will show examples for both Python and R.
Note that the Task template repo is used throughout the guide, so make sure to replace any occurrences of `"task_template"` with your task of interest.

:::{.callout-tip}
Make sure you have followed the ["Getting started"](getting_started.qmd) guide.
:::


## Step 1: Create a new component

Use the `create_*_metric.sh` script found in the scripts repository to start creating a new metric. Open the script and update the `name` parameter to the desired name of the method.

::: {.panel-tabset group="language"}
## Python

```{bash}
scripts/create_component/create_python_metric.sh
```

```{bash filename="scripts/create_component/create_python_metric.sh"}
#| eval: false
common/scripts/create_component \
  --name my_python_metric \
  --language python \
  --type metric
```

This will create a new folder at `src/metrics/my_python_metric` containing a Viash config and a script.

    src/metric/my_python_metric
        ├── script.py                    Script for running the metric.
        ├── config.vsh.yaml              Config file for metric.
        └── ...                          Optional additional resources.

## R

```{bash}
scripts/create_component/create_r_metric.sh
```

```{bash filename="scripts/create_component/create_r_metric.sh"}
#| eval: false
common/scripts/create_component \
  --name my_r_metric \
  --language r \
  --type metric
```

This will create a new folder at `src/metrics/my_r_metric` containing a Viash config and a script.

    src/metrics/my_r_metric
        ├── script.R                     Script for running the metric.
        ├── config.vsh.yaml              Config file for metric.
        └── ...                          Optional additional resources.

:::

Change the `--name` to a unique name for your metric. It must match the regex `[a-z][a-z0-9_]*` (snakecase).

* A **config file** contains metadata of the component and the dependencies required to run it. In steps 2 and 3 we will fill in the required information.
* A **script** contains the code to run the metric. In step 4 we will edit the script. 

:::{.callout-tip}
Some tasks have multiple metric subtypes (e.g. `batch_integration`), which will require you to use a different value for `--type` corresponding to the desired metric subtype.
:::

## Step 2: Fill in metadata

The [Viash config](https://viash.io/reference/config/) contains metadata of your metric, which script is used to run it, and the required dependencies. 

### Generated config file

This is what the `config.vsh.yaml` generated by the `create_component` component looks like:

:::{.panel-tabset group="language"}

### Python

<details><summary>Contents of `config.vsh.yaml`</summary>

```{embed lang="yaml"}
src/metrics/my_python_metric/config.vsh.yaml
```

</details>

### R

<details><summary>Contents of `config.vsh.yaml`</summary>

```{embed lang="yaml"}
src/metrics/my_r_metric/config.vsh.yaml
```

</details>

:::

### Required metadata fields

Please make sure that the following fields in the config file are filled in. The metrics component can contain several metric values these are listed in the `info.metrics`.

{{< include _include/_render_schema_required_fields.qmd >}}

<!-- ```{r echo=FALSE, warning=FALSE, error=FALSE}
info <- read_and_merge_yaml("src/common/schemas/task_metric.yaml")

info_str <- paste(render_schema_required_fields(info, required = TRUE), collapse = "\n\n")

knitr::asis_output(info_str)
``` -->


## Step 3: Add dependencies

{{< include _include/_add_dependencies.qmd >}}

:::{.callout-note}
**Tip:** After making changes to the components dependencies, you will need to rebuild the docker container as follows:

```bash
viash run src//metrics/my_python_metric/config.vsh.yaml -- \
  ---setup cachedbuild
```
<details><summary>Output</summary>
```{bash}
#| echo: false
viash run src/metrics/my_python_metric/config.vsh.yaml -- \
  ---setup cachedbuild
```
</details>
:::

## Step 4: Edit script

A component's script typically has five sections:

1. Imports and libraries
2. Argument values
3. Read input data
4. Generate results
5. Write output data to file

### Generated script

This is what the script generated by the `create_component` component looks like:

:::{.panel-tabset group="language"}

### Python

<details><summary>Contents of `script.py`</summary>

````python
```{bash}
#| echo: false
#| output: asis
#| code-line-numbers: true
cat src/metrics/my_python_metric/script.py
```
````

</details>

### R

<details><summary>Contents of `script.R`</summary>

```{embed lang="r"}
src/metrics/my_r_metric/script.R
```

</details>

:::

### Required sections

#### Imports and libraries

In the top section of the script you can define which packages/libraries the metric needs. If you add a new or different package add the dependency to `config.vsh.yaml` in the `setup` field (see above).

#### Argument block

The [Viash code block](https://viash.io/reference/viash_code_block/) is designed to facilitate prototyping, by enabling you to execute directly by running `python script.py` (or `Rscript script.R` for R users). Note that anything between "VIASH START" and "VIASH END" will be removed and replaced with a CLI argument parser when the components are being built by Viash.

Here, the `par` dictionary contains all the `arguments` defined in the `config.vsh.yaml` file (including those from the defined `__merge__` file). When adding a `argument` in the `par` dict **also** add it to the `config.vsh.yaml` in the `arguments` section.

#### Read input data

This section reads any input AnnData files passed to the component.

#### Generate results

This is the most important section of your script, as it defines the core functionality provided by the component. It processes the input data to create results for the particular task at hand.


#### Write output data to file

The output stored in a AnnData object and then written to an `.h5ad` file. The format is specified by the API file specified in the `__merge__` field in the config file.

## Step 5: Try component

Your component's API file contains the necessary unit tests to check whether your component works and the output is in the correct format.

You can test your component by using the following command:

```bash
viash test src/metrics/my_python_metric/config.vsh.yaml
```
<details>
  <summary>Output</summary>
```{bash}
#| echo: false
# use f1 instead of 'my_metric' because the script won't work.
# maybe copy a 'working' script here
viash test src/metrics/accuracy/config.vsh.yaml
```
</details>

Visit ["Run tests"](run_tests.qmd) for more information on running unit tests and how to interpret common error messages.

You can also run your component on local files using the `viash run` command. For example:

```bash
viash run src/metrics/my_python_metric/config.vsh.yaml -- \
  --input_prediction resources_test/task_template/cxg_mouse_pancreas_atlas/prediction.h5ad \
  --input_solution resources_test/task_template/cxg_mouse_pancreas_atlas/solution.h5ad \
  --output output.h5ad
```

## Next steps

If your component works, please [create a pull request](../create_component/create_pull_request.qmd).
