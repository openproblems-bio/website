---
title: What is a component?
order: 20
engine: knitr
---

{{< include ../_blocks/_clone_repo.qmd >}}
{{< include /_include/_evaluate_code.qmd >}}

In OpenProblems, each component (dataset loader, dataset processor, method, metric) is a modular Viash component. A Viash component is a combination of a code block or script and a small amount of metadata that makes it easy to generate pipeline modules, facilitating the separation of component functionality from the pipeline workflow. This enables developers to create reusable, modular, and robust components for OpenProblems, focusing on the specific functionality without having to worry about the chosen pipeline framework.


## Viash?

A Viash component consists of three main parts: a Viash config, a Script, and one or more unit tests [^zero]

```{mermaid}
graph TB
  subgraph component[Viash component]
    direction LR
    config["Viash config<br/> <br/> • Functionality metadata<br/>   - Component info<br/>   - Author info<br/>   - List of arguments<br/>   - List of resources<br/> <br/> • Platform-specific metadata<br/>   - Customisable Docker image<br/>   - Nextflow module settings"]
    script["Script<br/> <br/> • Bash, Python or R<br/> • Arg parser for free"]
    test["Unit test(s)<br/> <br/> • Add one or more unit tests<br/> • Mix languages<br/> • Share tests across components"]
  end
  subgraph runtime[Actions]
    direction LR
    build[Build standalone<br/>executable]
    image[Build customisable<br/>Docker image]
    module[Build Nextflow<br/>module]
    run_test[Run unit tests]
  end
  config & script & test --- Viash --> build & image & module & run_test
  %% Need mermaid>9.2
  %% config --> build & image & module & run_test
```

## Simplest Viash component

Below is an example of a very simple Viash component which simply copies an input file to an output destination.

::: {.grid}
::: {.g-col-lg-6 .g-col-12}

Contents of `config.vsh.yaml`

```yaml
functionality:
  name: my_copy_component
  arguments:
    - name: --input
      type: file
    - name: --output
      type: file
      direction: output
  resources:
    - type: bash_script
      path: script.sh
  test_resources:
    - type: bash_script
      path: test.sh
platforms:
  - type: docker
    image: "bash:4.0"
  - type: nextflow
```

:::
::: {.g-col-lg-6 .g-col-12}

Contents of `script.sh`

```bash
cp -r "$par_input" "$par_output"
```

Contents of `test.sh`

```bash
# create test input file
echo "foo" > input.txt

# run executable
$meta_executable \
  --input input.txt
  --output output.txt

# check for output
if [ ! -f output.txt ]; then
  echo "Output not found!"
  exit 1
fi

exit 0
```

:::
:::


Even though this component appears so simple, there's a lot going on behind the screens and a lot you can do with it.

* Run the component: 
  ```bash
  viash run config.vsh.yaml -- \
    --input myinput.txt \
    --output myoutput.txt
  ```
* View the CLI help:
  ```bash
  viash run config.vsh.yaml -- --help
  ```
* Build the component into a dockerized standalone executable:
  ```bash
  # build executable
  viash build config.vsh.yaml --output bin

  # view cli help
  bin/my_copy_component --help

  # use executable
  bin/my_copy_component --input input.txt --output output.txt
  ```
* Unit test the component
  ```bash
  viash test config.vsh.yaml
  ```
* View the Dockerfile used for this component
  ```bash
  viash run config.vsh.yaml -- ---dockerfile
  ```


### Run a component on a test dataset

Running an existing component is as simple as running a command in your terminal.
Using test data as input, you can try this out immediately.

Use the `viash run` command to run a Viash component. Everything after the
`--` separator counts as the arguments of the component itself. In this case,
the `knn` component has an `--input_train` and `--input_test` argument to which
the test resources are passed.

```bash
viash run src/label_projection/methods/knn/config.vsh.yaml -- \
  --input_train resources_test/label_projection/pancreas/train.h5ad \
  --input_test resources_test/label_projection/pancreas/test.h5ad \
  --output output.h5ad
```
<details>
  <summary>Output</summary>
```{bash}
#| echo: false
viash run src/label_projection/methods/knn/config.vsh.yaml -- \
  --input_train resources_test/label_projection/pancreas/train.h5ad \
  --input_test resources_test/label_projection/pancreas/test.h5ad \
  --output output.h5ad
```
</details>

### Testing components

Testing components is an important part of the development process.
Each tasks comes with pre-defined unit tests that can be run using the `viash test` command.

```bash
viash test src/label_projection/methods/knn/config.vsh.yaml
```
<details>
  <summary>Output</summary>
```{bash}
#| echo: false
viash test src/label_projection/methods/knn/config.vsh.yaml
```
</details>

If you want to run the unit tests for all of the components of a task, you can use the `viash ns test` command.

```bash
viash ns test --query label_projection --parallel --platform docker
```
<details>
  <summary>Output</summary>
                   namespace        functionality             platform            test_name exit_code duration               result
    label_projection/methods  logistic_regression               docker                start                                        
    label_projection/methods               scanvi               docker                start                                        
    label_projection/methods                  knn               docker                start                                        
    label_projection/methods                  mlp               docker                start                                        
    label_projection/metrics             accuracy               docker                start                                        
    label_projection/metrics                   f1               docker                start
    label_projection/methods  logistic_regression               docker     build_executable         0        4              SUCCESS
    label_projection/methods  logistic_regression               docker      generic_test.py         0        9              SUCCESS
    label_projection/metrics                   f1               docker     build_executable         0        7              SUCCESS
    label_projection/metrics                   f1               docker      format_check.py         0        8              SUCCESS
    label_projection/metrics             accuracy               docker     build_executable         0        8              SUCCESS
    label_projection/metrics             accuracy               docker      format_check.py         0        7              SUCCESS
    ...
</details>