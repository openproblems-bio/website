---
title: Concepts
order: 15
engine: knitr
bibliography: ../../_openproblems-v2/src/common/library.bib
---

Every component in OpenProblems is a Viash component. To assemble these components into flexible benchmarking pipelines, AnnData serves as the standard file format for both input and output files of a component.

{{< include ../_figures/_fig_task_structure.qmd >}}

## AnnData file format

AnnData, short for "Annotated Data", is a file format for handling annotated, high-dimensional biological data [@virshup2021anndataannotateddata]. In the context of OpenProblems, AnnData is used as the standard data format for both input and output files of components. This ensures a consistent and seamless exchange of data between different components of the benchmarking pipelines, allowing developers to focus on the core functionality of their components without worrying about data format compatibility.

![AnnData objects have a structured format that includes the main data matrix (`X`, e.g. gene expression values), annotations of observations (`obs`, e.g. cell metadata), annotations of variables (`var`, e.g. gene metadata), and unstructured annotations (`uns`). This organization makes it easy to work with complex datasets while maintaining data integrity and ensuring a standardized structure across different components.](../images/anndata.svg){#fig-anndata-format}

Files with the `.h5ad` extension represent AnnData objects stored in an HDF5 file. AnnData objects can be opened in Python using the [`anndata.read_h5ad()`](https://anndata.readthedocs.io/en/latest/generated/anndata.read_h5ad.html#anndata.read_h5ad) function, and in R using the [`anndata::read_h5ad()`](https://anndata.dynverse.org/reference/read_h5ad.html) function. Technically it can be read in any language using an HDF5 library.

## Viash component

A Viash component is a combination of a code block or script and a small amount of metadata that makes it easy to generate pipeline modules, facilitating the separation of component functionality from the pipeline workflow [@cannoodt2021viashfromscripts]. This enables developers to create reusable, modular, and robust components for OpenProblems, focusing on the specific functionality without having to worry about the chosen pipeline framework.

A Viash component consists of three main parts: a Viash config, a script, and one or more unit tests ([@fig-viash-runtime]). 

![Viash supports robust pipeline development by allowing users to build their component as a standalone executable (with auto-generated CLI), build a Docker container to run the script inside, or turn the component into a standalone Nextflow module.](../images/viash_figure_2.svg){#fig-viash-runtime}

## Example component

Below is an example of a simple Viash component written in Python. For examples of components written in Bash, JavaScript or R, please visit the [Viash documentation](https://viash.io/guide/component/create-component.html).

:::{.small}
```{.yaml filename="config.vsh.yaml"}
functionality:
  name: mycomponent
  description: |
    A multiline description.
  arguments:
    - name: "--input"
      type: file
      description: Input h5ad
      example: input.h5ad
      required: true
    - name: "--output"
      type: file
      direction: output
      description: Output g5ad
      example: output.h5ad
      required: true
  resources:
    - type: python_script
      path: script.py
    tests:
    - type: python_script
      path: test.py
platforms:
  - type: docker
      image: "python:3.10"
      setup:
        - type: python
          pypi: anndata
  - type: native
  - type: nextflow
```
:::


:::{.small}
```{.python filename="script.py"}
import anndata

## VIASH START
par = {
  'input': 'test_resource.txt',
  'output': 'output.txt'
}
## VIASH END

# Print par
print(f"par: {par}")

# Read input file
adata = anndata.read_h5ad(par["input"])

# Print adata
print(f"adata: {adata}")

# Write output file
adata.write_h5ad(par["output"])
```
:::

### Example run commands

##### Display help text

:::{.small}
```bash
viash run config.vsh.yaml -- --help
```
:::

##### Run a component

:::{.small}
```bash
viash run config.vsh.yaml -- --input dataset.h5ad --output output.h5ad
```
:::

## Example build commands

##### Generate an executable

:::{.small}
```bash
viash build config.vsh.yaml --output bin
```
:::

##### Display help text

:::{.small}
```bash
bin/mycomponent --help
```
:::

##### Run executable

:::{.small}
```bash
bin/mycomponent --input dataset.h5ad --output output.h5ad
```
:::

##### Build all components in the Label Projection task

:::{.small}
```bash
viash ns build --query "label_projection"
```
:::

## Example test commands

##### Run unit test

:::{.small}
```bash
viash test config.vsh.yaml
```
:::

##### Run all unit tests in the Label Projection task

:::{.small}
```bash
viash ns test --query "label_projection"
```
:::

### Add dependencies


### Par and meta variables

More information can be found [here](https://viash.io/guide/component/variables.html) including the syntax for multiple languages.

When adding a method or metric to the OPv2 you will need to define the arguments in the config file. To help with local development you can add a viash placeholder code block to define these arguments. This code block strats with `## VIASH START` and ends with `## VIASH END`.

This makes it easier to run the script locally e.g. `python script.py`.

If you want to set your variables for local development add a viash code block either manually e.g.

```python
## VIASH START
# Note: This codeblock is for debugging purposes and
# is removed by Viash at runtime.
par = {
  'input': 'test_resource.txt',
  'output': 'output.txt'
}
## VIASH END
```

Everything that is in the `par` must be the same as what is defined in the `functionality.arguments` section of your `config.vsh.yaml`.

Or you can add all available variables by using the following command:

```bash
viash config inject path/to/config.vsh.yaml
```

Which will update your script in the correct laguage format with a code block similar to this:

```python
## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input': r'file.txt',
  'output': r'output.txt'
}
meta = {
  'functionality_name': r'example_python',
  'resources_dir': r'/tmp/viash_inject_example_python6207454802050445393',
  'executable': r'/tmp/viash_inject_example_python6207454802050445393/example_python',
  'config': r'/tmp/viash_inject_example_python6207454802050445393/.config.vsh.yaml',
  'temp_dir': r'/tmp',
  'cpus': int(r'123'),
  'memory_b': int(r'123'),
  'memory_kb': int(r'123'),
  'memory_mb': int(r'123'),
  'memory_gb': int(r'123'),
  'memory_tb': int(r'123'),
  'memory_pb': int(r'123')
}

## VIASH END
```

When you run your script using `viash run` the code block will be overwritten with the arguments provided at runtime.

::: {.callout-caution}
## Update config file

If you want to add a new argument to your script, add it to the config `functionality.arguments` section first before adding it to the par in the viash code block. Or use the `injectt command` to update your script.
:::


### Use helper functions

visit [here](https://viash.io/guide/component/use-helper-functions.html) for more information.

You can create helper functions which can then be used in the different methods and metrics of the task. 

1. Create the helper script where you define functions that can be called e.g.
   
    ```python
    import shutil

    def copy_file(source, dest):
        print(f"Copying '{source}' to '{dest}'.")
        shutil.copyfile(source, dest) 
    ```

2. Add the helper script to the `functionality.resources` section of the viash config file of your method/metric e.g.
   
    ```yaml
    resources:
        - type: python_script
          path: script.py
        - path: helper.py
    ```

3. Import the helper function in your script e.g.
   
    ```python
    # import helper function
    source(paste0(meta$resources_dir, "/helper.R"))

    # copy file
    copy_file(par$input, par$output)

    ```

### viash config view

More information [here](https://viash.io/reference/cli/config_view.html).

When using the `__merge__` it can be possbile to lose oversight of the whole config file. You can view how the config file is rendered for viash by using the following command:

```bash
viash config view path/to/config.vsh.yaml
```

## More information

Check out the [Viash cheat sheet](../more_information/cheat_sheets.qmd#fig-viash-cheat-sheet) for more information on how to interact with Viash components.
Check the [Viash guide](https://viash.io/guide) or [reference documentation](https://viash.io/reference/) for more information.