---
title: Concepts
order: 15
engine: knitr
bibliography: ../../_openproblems-v2/src/common/library.bib
---

Our benchmarking pipeline consists of [Viash components](#viash-component) and [AnnData HDF5 files](#anndata-file-format).

{{< include ../_figures/_fig_task_structure.qmd >}}

## AnnData file format

AnnData, short for "Annotated Data", is a file format for handling annotated, high-dimensional biological data [@virshup2021anndataannotateddata]. In the context of OpenProblems, AnnData is used as the standard data format for both input and output files of components. This ensures a consistent and seamless exchange of data between different components of the benchmarking pipelines, allowing developers to focus on the core functionality of their components without worrying about data format compatibility.

![AnnData objects have a structured format that includes the main data matrix (`X`, e.g. gene expression values), annotations of observations (`obs`, e.g. cell metadata), annotations of variables (`var`, e.g. gene metadata), and unstructured annotations (`uns`). This organization makes it easy to work with complex datasets while maintaining data integrity and ensuring a standardized structure across different components.](../images/anndata.svg){#fig-anndata-format}

Files with the `.h5ad` extension represent AnnData objects stored in an HDF5 file. AnnData objects can be opened in Python using the [`anndata.read_h5ad()`](https://anndata.readthedocs.io/en/latest/generated/anndata.read_h5ad.html#anndata.read_h5ad) function, and in R using the [`anndata::read_h5ad()`](https://anndata.dynverse.org/reference/read_h5ad.html) function. Technically it can be read in any language using an HDF5 library.

### Common dataset format

In OpenProblems, most of the AnnData datasets will have a subset of the following slots:

    AnnData object
      obs: 'celltype', 'batch', 'tissue', 'size_factors'
      var: 'hvg', 'hvg_score'
      obsm: 'X_pca'
      obsp: 'knn_distances', 'knn_connectivities'
      varm: 'pca_loadings'
      layers: 'counts', 'normalized'
      uns: 'dataset_id', 'dataset_name', 'data_url', 'data_reference', 'dataset_summary', 'dataset_description', 'dataset_organism', 'pca_variance', 'knn'

:::{.callout-note}
In OpenProblems, the X slot in the AnnData objects is typically not defined (`None` in Python, `NULL` in R). Instead, the raw counts and normalised expression data are defined as layers.
:::

Please visit the reference documentation on the [common dataset file format](/documentation/reference/openproblems-v2/src-datasets.qmd#file-format-common-dataset) used by OpenProblems for more information on each of the different slots.

### Dataset format specifications

OpenProblems tasks contain specifications for the required and optional slots in AnnData files. For more information on how these specifications are formatted, see ["Design the API"](/documentation/create_task/design_api.qmd).

## Viash component

A Viash component is a combination of a code block or script and a small amount of metadata that makes it easy to generate pipeline modules, facilitating the separation of component functionality from the pipeline workflow [@cannoodt2021viashfromscripts]. This enables developers to create reusable, modular, and robust components for OpenProblems, focusing on the specific functionality without having to worry about the chosen pipeline framework.

A Viash component consists of three main parts: a Viash config, a script, and one or more unit tests ([@fig-viash-runtime]). 

![Viash supports robust pipeline development by allowing users to build their component as a standalone executable (with auto-generated CLI), build a Docker container to run the script inside, or turn the component into a standalone Nextflow module.](../images/viash_figure_2.svg){#fig-viash-runtime}

## Example component

When creating a new Viash component, you will need to create a script and a config file. Below is an example of a simple Viash component written in Python. For examples of components written in Bash, JavaScript or R, please visit the [Viash documentation](https://viash.io/guide/component/create-component.html).

### Script

To help with prototyping, a Viash component's script should be runnable. You can do this by defining a [Viash placeholder](https://viash.io/guide/component/variables.html) code block denoted by the `## VIASH START` and `## VIASH END` comments.

The Viash placeholder should contain a dictionary (or named list) which contains example values for all of the input/output arguments your component needs. During execution, Viash will remove the placeholder and replace it with the actual parameter values at runtime.


:::{.small}
```{.python filename="script.py"}
import anndata

## VIASH START
# Note: This codeblock is for prototyping and
# is removed by Viash at runtime.
par = {
  'input': 'test_resource.txt',
  'output': 'output.txt'
}
## VIASH END

# Print par
print(f"par: {par}")

# Read input file
adata = anndata.read_h5ad(par["input"])

# Print adata
print(f"adata: {adata}")

# Write output file
adata.write_h5ad(par["output"])
```
:::

:::{.callout-tip}
It's possible to store helper functions in separate files. Visit the [Viash documentation](https://viash.io/guide/component/use-helper-functions.html) for more information.
:::


### Viash config

Next, we'll write a Viash config file for this component. 

:::{.small}
```{.yaml filename="config.vsh.yaml"}
functionality:
  name: mycomponent
  description: |
    A multiline description.
  arguments:
    - name: "--input"
      type: file
      description: Input h5ad
      example: input.h5ad
      required: true
    - name: "--output"
      type: file
      direction: output
      description: Output g5ad
      example: output.h5ad
      required: true
  resources:
    - type: python_script
      path: script.py
    tests:
    - type: python_script
      path: test.py
platforms:
  - type: docker
      image: "python:3.10"
      setup:
        - type: python
          pypi: anndata
  - type: native
  - type: nextflow
```
:::

:::{.callout-tip}
After adding more arguments to the config, you can update your script using the [`viash config inject`](#config-inject)
:::

## Commonly used commands

Below is a list of common Viash commands to develop and maintain components. 
Check out this [Cheat sheet](/documentation/more_information/cheat_sheets.qmd) to get a printable version of the same information. Please visit the [Viash guide](https://viash.io/guide) or [reference documentation](https://viash.io/reference/) for more in-depth information.


### Run a component

##### Display help text

:::{.small}
```bash
viash run path/to/config.vsh.yaml -- --help
```
:::

##### Run a component

:::{.small}
```bash
viash run path/to/config.vsh.yaml -- --input dataset.h5ad --output output.h5ad
```
:::



### Build a component

##### Generate an executable

:::{.small}
```bash
viash build path/to/config.vsh.yaml --output bin --setup cachedbuild
```
:::

##### Display help text

:::{.small}
```bash
bin/mycomponent --help
```
:::

##### Run executable

:::{.small}
```bash
bin/mycomponent --input dataset.h5ad --output output.h5ad
```
:::

##### Build all components in the Label Projection task

:::{.small}
```bash
viash ns build --query "label_projection" --setup cachedbuild --parallel
```
:::



### Test a component

##### Run unit test

:::{.small}
```bash
viash test path/to/config.vsh.yaml
```
:::

##### Run all unit tests in the Label Projection task

:::{.small}
```bash
viash ns test --query "label_projection" --parallel
```
:::

### Edit script

##### Update the `VIASH START`--`VIASH END` placeholder {#config-inject}

:::{.small}
```bash
viash config inject path/to/config.vsh.yaml
```
:::

### View component

##### View config

:::{.small}
```bash
viash config view path/to/config.vsh.yaml
```
:::

