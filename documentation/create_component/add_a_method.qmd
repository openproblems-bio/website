---
title: Add a method
description: This guide will show you how to add a new method to the pipeline.
order: 40
engine: knitr
---

{{< include ../../_include/_clone_repo.qmd >}}
{{< include /_include/_evaluate_code.qmd >}}
{{< include /_include/_synchonize_tabs.qmd >}}
{{< include /_include/_read_api.qmd >}}

A method is a technique to solve a specific problem when analysing omics data. Its performance is assessed by comparing it to other methods and control methods.

This guide will show you how to create a new [Viash](https://viash.io) component.
In the following we will show examples for both Python and R.
Note that the Label Projection task is used throughout the guide, so make sure to replace any occurrences of `"label_projection"` with your task of interest.

:::{.callout-tip}
Make sure you have followed the ["Getting started"](../fundamentals/getting_started.qmd) guide.
:::

## Step 1:  Create a new component

Use the `create_component` component to start creating a new method.

::: {.panel-tabset}
## Python
```{bash}
viash run src/common/create_component/config.vsh.yaml -- \
  --task label_projection \
  --type method \
  --name my_method_py \
  --language python
```


This will create a new folder at `src/tasks/label_projection/methods/my_method_py` containing a Viash config and a script.

    src/tasks/label_projection/methods/my_method_py
        ├── script.py                    Script for running the method.
        ├── config.vsh.yaml              Config file for method.
        └── ...                          Optional additional resources.

## R

```{bash}
viash run src/common/create_component/config.vsh.yaml -- \
  --task label_projection \
  --type method \
  --name my_method_r \
  --language r
```


This will create a new folder at `src/tasks/label_projection/methods/my_method_r` containing a Viash config and a script.

    src/tasks/label_projection/methods/my_method_r
        ├── script.R                     Script for running the method.
        ├── config.vsh.yaml              Config file for method.
        └── ...                          Optional additional resources.

:::

:::{.callout-tip}
Some tasks have multiple method subtypes (e.g. `batch_integration`), which will require you to use a different value for `--type` corresponding to the desired method subtype.
:::

Change the `--name` to a unique name for your method. It must match the regex `[a-z][a-z0-9_]*` (snakecase).

* A **config file** contains metadata of the component and the dependencies required to run it. In steps 2 and 3 we will fill in the required information.
* A **script** contains the code to run the method. In step 4 we will edit the script. 


## Step 2: Fill in metadata

```{r, include=FALSE, eval=TRUE}
# set eval to TRUE to make sure is always run, even when profile is not 'evaluate_code'
norm_methods <- list.files("src/datasets/normalization")
norm_methods_str <- paste(paste0("`", norm_methods, "`"), collapse = ", ")
```

The [Viash config](https://viash.io/reference/config/) contains metadata of your method, which script is used to run it, and the required dependencies. 

### Generated config file

This is what the `config.vsh.yaml` generated by the `create_component` component looks like:

:::{.panel-tabset}

### Python

<details><summary>Contents of `config.vsh.yaml`</summary>

````yaml
```{bash}
#| echo: false
#| output: asis
cat src/tasks/label_projection/methods/my_method_py/config.vsh.yaml
```
````

</details>

### R

<details><summary>Contents of `config.vsh.yaml`</summary>

````yaml
```{bash}
#| echo: false
#| output: asis
cat src/tasks/label_projection/methods/my_method_r/config.vsh.yaml
```
````

</details>

:::


### Required metadata fields

Please edit `functionality.info` section in the config file to fill in the necessary metadata.

{{< include _include/_render_schema_required_fields.qmd >}}

```{r echo=FALSE, warning=FALSE, error=FALSE}
info <- read_and_merge_yaml("src/common/schemas/task_method.yaml")

info_str <- paste(render_schema_required_fields(info, required = TRUE), collapse = "\n\n")

knitr::asis_output(info_str)
```


## Step 3: Add dependencies

{{< include _include/_add_dependencies.qmd >}}

:::{.callout-note}
**Tip:** After making changes to the components dependencies, you will need to rebuild the docker container as follows:

```bash
viash run src/tasks/label_projection/methods/my_method_py/config.vsh.yaml -- \
  ---setup cachedbuild
```
<details><summary>output</summary>
```{bash}
#| echo: false
viash run src/tasks/label_projection/methods/my_method_py/config.vsh.yaml -- \
  ---setup cachedbuild
```
</details>

:::

## Step 4: Edit script

A component's script typically has five sections:

1. Imports and libraries
2. Argument values
3. Read input data
4. Generate results
5. Write output data to file


This is what the script generated by the `create_component` component looks like:

:::{.panel-tabset}

### Python

<details><summary>Contents of `script.py`</summary>

````python
```{bash}
#| echo: false
#| output: asis
cat src/tasks/label_projection/methods/my_method_py/script.py
```
````

</details>

### R

<details><summary>Contents of `script.R`</summary>

````r
```{bash}
#| echo: false
#| output: asis
cat src/tasks/label_projection/methods/my_method_r/script.R
```
````

</details>

:::

The required sections are explained here in more detail:

### a. Imports and libraries

In the top section of the script you can define which packages/libraries the method needs. If you add a new or different package add the dependency to `config.vsh.yaml` in the `setup` field (see above).

### b. Argument block

The [Viash code block](https://viash.io/reference/viash_code_block/) is designed to facilitate prototyping, by enabling you to execute directly by running `python script.py` (or `Rscript script.R` for R users). Note that anything between "VIASH START" and "VIASH END" will be removed and replaced with a CLI argument parser when the components are being built by Viash.

Here, the `par` dictionary contains all the `arguments` defined in the `config.vsh.yaml` file (including those from the defined `__merge__` file). When adding a `argument` in the `par` dict **also** add it to the `config.vsh.yaml` in the `arguments` section.

### c. Read input data

This section reads any input AnnData files passed to the component.

### d. Generate results

This is the most important section of your script, as it defines the core functionality provided by the component. It processes the input data to create results for the particular task at hand.


### e. Write output data to file

The output stored in a AnnData object and then written to an `.h5ad` file. The format is specified by the API file specified in the `__merge__` field in the config file.


## Step 5: Add resources (optional)

It is possible to add additional resources such as a file containing helper functions or other resources. Please visit [this page](https://viash.io/guide/component/use-helper-functions.html) for more information on how to do this.

## Step 6: Try component

Your component's API file contains the necessary unit tests to check whether your component works and the output is in the correct format.

You can test your component by using the following command:

```bash
viash test src/tasks/label_projection/methods/my_method_py/config.vsh.yaml
```
<details>
  <summary>Output</summary>
```{bash}
#| echo: false
# use knn instead of 'my_method' because the script won't work.
# maybe copy a 'working' script here
viash test src/tasks/label_projection/methods/knn/config.vsh.yaml
```
</details>

Visit ["Run tests"](run_tests.qmd) for more information on running unit tests and how to interpret common error messages.

You can also run your component on local files using the `viash run` command. For example:

```bash
viash run src/tasks/label_projection/methods/my_method_py/config.vsh.yaml -- \
  --input_train resources_test/label_projection/pancreas/train.h5ad \
  --input_test resources_test/label_projection/pancreas/test.h5ad \
  --output output.h5ad
```

## Next steps

If your component works, please [create a pull request](../create_component/create_pull_request.qmd).

