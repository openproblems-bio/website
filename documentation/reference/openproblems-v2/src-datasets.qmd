---
title: src/datasets/
engine: knitr
---

```{r setup-packages, include=FALSE}
library(tidyverse)
library(rlang)

# copied from https://github.com/openproblems-bio/openproblems-v2/blob/b2b4da9fe418587813e8066fb5691dbe07838525/src/label_projection/README.qmd
strip_margin <- function(text, symbol = "\\|") {
  str_replace_all(text, paste0("(\n?)[ \t]*", symbol), "\\1") 
}
```

{{< include /_include/_clone_repo.qmd >}}
{{< include /_include/_evaluate_code.qmd >}}
{{< include /_include/_read_api.qmd >}}

The dataset processing pipeline uses dataset loaders to create raw dataset files (@fig-dataset-workflow). The raw dataset files are then processed to generate common dataset files. Common dataset files are used in one or more tasks.

{{< include /documentation/_figures/_project_structure_dataset_workflow.qmd >}}



# Directory structure


- **Dataset file and component formats** (`src/datasets/api`): This folder contains specifications for dataset file formats and component interfaces. This documentation page was generated mostly by reading in these files.

- **Dataset loader** (`src/datasets/loaders`): This folder contains components to load and format datasets for various sources.

- **Dataset normalization** (`src/datasets/normalization`): This folder contains various dataset normalization methods.

- **Dataset processors** (`src/datasets/processors`): This folder contains components for processing datasets, such as computing a KNN, PCA, HVG or subsetting.

- **Resource generation scripts** (`src/common/resources_scripts`): This folder contains scripts for generating the datasets using the dataset loaders, normalization methods and processors.

- **Test resource generation scripts** (`src/common/resources_test_scripts`): This folder contains scripts for generating test resources.


# Components and file formats

```{r include=FALSE}
# TODO: move label and src_path info to the spec itself
render_component <- function(path, label, src_path) {
  comp_spec <- read_comp_spec(path)

  strip_margin(glue::glue("
    §## Component type: {label}
    §
    §Path: [`{src_path}`](https://github.com/openproblems-bio/openproblems-v2/tree/main/{src_path})
    §
    §Arguments:
    §
    §{paste(format_comp_args_as_tibble(comp_spec$args), collapse = '\n')}
    §
    §"), symbol = "§")
}
```

```{r include=FALSE}
render_file <- function(path) {
  spec <- read_anndata_spec(path)

  strip_margin(glue::glue("
    §## File format: {spec$info$label}
    §
    §{spec$info$description}
    §
    §Example format:
    §
    §{paste(format_slots(spec$slots), collapse = '\n')}
    §
    §Slots:
    §
    §{paste(format_slots_as_kable(spec$slots), collapse = '\n')}
    §
    §"), symbol = "§")
}
```

```{r echo=FALSE, warning=FALSE, error=FALSE, output="asis"}
lines <- render_component("src/datasets/api/comp_dataset_loader.yaml", "Dataset loader", "src/datasets/loaders")
cat(lines)
```

```{r echo=FALSE, warning=FALSE, error=FALSE, output="asis"}
lines <- render_file("src/datasets/api/anndata_raw.yaml")
cat(lines)
```

```{r echo=FALSE, warning=FALSE, error=FALSE, output="asis"}
lines <- render_component("src/datasets/api/comp_normalization.yaml", "Dataset normalization", "src/datasets/normalization")
cat(lines)
```

```{r echo=FALSE, warning=FALSE, error=FALSE, output="asis"}
lines <- render_file("src/datasets/api/anndata_normalized.yaml")
cat(lines)
```

<!-- todo: create separate spec for dataset processor? -->
## Component type: Dataset processors

Path: `src/datasets/processors`: This folder contains components for processing datasets, such as computing a KNN, PCA, HVG or subsetting.


```{r echo=FALSE, warning=FALSE, error=FALSE, output="asis"}
lines <- render_file("src/datasets/api/anndata_common_dataset.yaml")
cat(lines)
```


