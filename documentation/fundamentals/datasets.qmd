---
title: Datasets
description: "Reusable benchmarking datasets and their file format specifications"
order: 40
engine: knitr
bibliography: ../../library.bib
reference-location: margin
citation-location: margin
---

{{< include ../../_include/_clone_repo.qmd >}}
{{< include /_include/_evaluate_code.qmd >}}
{{< include /_include/_read_api.qmd >}}

In the context of OpenProblems, AnnData is used as the standard data format for both input and output files of components.
AnnData, short for "Annotated Data", is a file format for handling annotated, high-dimensional biological data [@virshup2021anndataannotateddata].
Having one standard file format ensures a consistent and seamless exchange of data between different components of the benchmarking pipelines, allowing developers to focus on the core functionality of their components without worrying about data format compatibility.

![AnnData objects have a structured format that includes the main data matrix (`X`, e.g. gene expression values), annotations of observations (`obs`, e.g. cell metadata), annotations of variables (`var`, e.g. gene metadata), and unstructured annotations (`uns`). This organization makes it easy to work with complex datasets while maintaining data integrity and ensuring a standardized structure across different components.](../images/anndata.svg){#fig-anndata-format cap-location="margin" width="60%"}

Files with the `.h5ad` extension represent AnnData objects stored in an HDF5 file. AnnData objects can be opened in Python using the [`anndata.read_h5ad()`](https://anndata.readthedocs.io/en/latest/generated/anndata.read_h5ad.html#anndata.read_h5ad) function, and in R using the [`anndata::read_h5ad()`](https://anndata.dynverse.org/reference/read_h5ad.html) function. Technically it can be read in any language using an HDF5 library.

# File format specifications

All OpenProblems tasks contain specifications for exact format of all H5AD inputs and outputs for all components in the workflow. These specifications contain information on the required and optional fields in the AnnData objects, as well as descriptions of those fields. 

These fileds are used to validate the input and output files of components, and to generate the documentation for the API of each component.

You should be able to find these specifications in the `src/tasks/*/api/file_*.yaml` of each task.

For more information on how these specifications are formatted, see ["Design the API"](/documentation/create_task/design_api.qmd#step-2).


# Common datasets

OpenProblems offers a collection of common datasets that can be used to test components and run the benchmarking tasks. These datasets are generated by dataset loaders and processed by a common processing pipeline stored in [`src/datasets`](/documentation/reference/openproblems-v2/src-datasets.qmd). 

{{< include /documentation/_figures/_project_structure_dataset_workflow.qmd >}}

# File format

The format of common datasets is based on the [CELLxGENE schema](https://github.com/chanzuckerberg/single-cell-curation/blob/main/schema/4.0.0/schema.md) along with additional metadata that is specific to OpenProblems (in the `.uns` slot) and some additional output generated by our dataset preprocessors (in the `.layers`, `.obsm`, `obsp` and `.varm` slots).

Here is what a typical common dataset looks like when printed to the console:

```{r echo=FALSE, warning=FALSE, error=FALSE}
spec <- read_anndata_spec("src/datasets/api/file_common_dataset.yaml")

str <- format_slots(spec)

knitr::asis_output(c(
  ":::{{.small}}\n\n",
  paste0(str, "\n"),
  "\n:::\n"
))
```

Some slots might not be available depending on the origin of the dataset.
Please visit the reference documentation on the [common dataset file format](/documentation/reference/openproblems-v2/src-datasets.qmd#file-format-common-dataset) used by OpenProblems for more information on each of the different slots.

:::{.callout-note}
In OpenProblems, the X slot in the AnnData objects is typically not defined (`None` in Python, `NULL` in R). Instead, the raw counts and normalised expression data are defined as layers.
:::

# Available datasets

Our datasets are stored in `s3://openproblems-data/resources` while test resources are stored in `s3://openproblems-data/resources_test`.

```
aws s3 ls --recursive s3://openproblems-data | grep "resources/datasets/.*/log_cp10k/state.yaml"
```


TODO: show properties of each dataset

    2023-12-16 10:58:11        112 resources/datasets/cellxgene_census/dkd/log_cp10k/state.yaml
    2023-12-16 11:08:22        116 resources/datasets/cellxgene_census/gtex_v9/log_cp10k/state.yaml
    2023-12-16 12:29:47        113 resources/datasets/cellxgene_census/hcla/log_cp10k/state.yaml
    2023-12-16 11:46:33        116 resources/datasets/cellxgene_census/hypomap/log_cp10k/state.yaml
    2023-12-16 11:31:02        126 resources/datasets/cellxgene_census/immune_cell_atlas/log_cp10k/state.yaml
    2023-12-16 11:53:22        129 resources/datasets/cellxgene_census/mouse_pancreas_atlas/log_cp10k/state.yaml
    2023-12-16 12:28:57        123 resources/datasets/cellxgene_census/tabula_sapiens/log_cp10k/state.yaml
    2023-12-15 22:06:55        125 resources/datasets/openproblems_v1/allen_brain_atlas/log_cp10k/state.yaml
    2023-12-15 22:01:13        114 resources/datasets/openproblems_v1/cengen/log_cp10k/state.yaml
    2023-12-15 22:03:14        120 resources/datasets/openproblems_v1/immune_cells/log_cp10k/state.yaml
    2023-12-15 21:59:13        135 resources/datasets/openproblems_v1/mouse_blood_olsson_labelled/log_cp10k/state.yaml
    2023-12-15 22:00:53        132 resources/datasets/openproblems_v1/mouse_hspc_nestorowa2016/log_cp10k/state.yaml
    2023-12-15 22:03:34        116 resources/datasets/openproblems_v1/pancreas/log_cp10k/state.yaml
    2023-12-15 21:58:54        120 resources/datasets/openproblems_v1/tenx_1k_pbmc/log_cp10k/state.yaml
    2023-12-15 21:59:24        120 resources/datasets/openproblems_v1/tenx_5k_pbmc/log_cp10k/state.yaml
    2023-12-15 22:02:35        119 resources/datasets/openproblems_v1/tnbc_wu2021/log_cp10k/state.yaml
    2023-12-15 22:02:05        117 resources/datasets/openproblems_v1/zebrafish/log_cp10k/state.yaml
    2023-12-16 09:56:39        247 resources/datasets/openproblems_v1_multimodal/citeseq_cbmc/log_cp10k/state.yaml
    2023-12-16 09:56:25        252 resources/datasets/openproblems_v1_multimodal/scicar_cell_lines/log_cp10k/state.yaml
    2023-12-16 09:56:40        254 resources/datasets/openproblems_v1_multimodal/scicar_mouse_kidney/log_cp10k/state.yaml

