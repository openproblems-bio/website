---
title: Getting started
order: 20
engine: knitr
---

{{< include ../_blocks/_clone_repo.qmd >}}
{{< include /_include/_evaluate_code.qmd >}}

To get started with contributing to OpenProblems, you'll need to fork and clone the OpenProblems repository to your local machine.


## Step 1: Create a fork

Go to the OpenProblems repository at [https://github.com/openproblems-bio/openproblems-v2](https://github.com/openproblems-bio/openproblems-v2) and click on the "Fork" button in the top right corner of the page.

![](../images/fork_repo.png){width=500px}

This will create a copy of the repository under your GitHub account. 


## Step 2: Clone the repository
To clone this forked repository to your local machine, copy the URL of the forked repository by clicking the green "Code" button and selecting HTTPS or SSH.

In your terminal or command prompt, navigate to the directory where you want to clone the repository and enter the following command:

```bash
git clone <forked repository URL>
```

This will download a copy of the repository to your local machine. You can now make changes to the code, add new functionality, and commit your changes.

## Step 3: Download test resources

You will also need to download the test resources by running the following command.

```bash
viash run src/common/sync_test_resources/config.vsh.yaml
```
<details>
  <summary>Output</summary>
```{bash}
#| echo: false
rm -r resources_test
viash run src/common/sync_test_resources/config.vsh.yaml
```
</details>

## Ready, set, go!

That's it! Now you should be able to start adding functionality to the pipeline.
Please check the relevant documentation for adding a [dataset](add_a_dataset.qmd), 
[method](add_a_method.qmd), or [metric](add_a_metric.qmd). Here are a few example
pointers to help you get started quickly.


### Review project structure

The project repository is structured as follows:

![](../images/repositories-half.svg)

For detailed information on how this project is structured, see the ["Project structure"](../more_information/project_structure.qmd).

### Run a component on a test dataset

Use the `viash run` command to run a Viash component. Everything after the
`--` separator counts as the arguments of the component itself. In this case,
the `knn` component has an `--input_train` and `--input_test` argument to which
the test resources are passed.

```bash
viash run src/label_projection/methods/knn/config.vsh.yaml -- \
  --input_train resources_test/label_projection/pancreas/train.h5ad \
  --input_test resources_test/label_projection/pancreas/test.h5ad \
  --output output.h5ad
```
<details>
  <summary>Output</summary>
```{bash}
#| echo: false
viash run src/label_projection/methods/knn/config.vsh.yaml -- \
  --input_train resources_test/label_projection/pancreas/train.h5ad \
  --input_test resources_test/label_projection/pancreas/test.h5ad \
  --output output.h5ad
```
</details>

### Unit test a component

Use `viash test` to run all of the component's unit tests.

```bash
viash test src/label_projection/methods/knn/config.vsh.yaml
```
<details>
  <summary>Output</summary>
```{bash}
#| echo: false
viash test src/label_projection/methods/knn/config.vsh.yaml
```
</details>

### Run all unit tests for one of the tasks

Use `viash ns test` to unit test all of the components of a given task.

```bash
viash ns test --query label_projection --parallel --platform docker
```
<details>
  <summary>Output</summary>
                   namespace        functionality             platform            test_name exit_code duration               result
    label_projection/methods  logistic_regression               docker                start                                        
    label_projection/methods               scanvi               docker                start                                        
    label_projection/methods                  knn               docker                start                                        
    label_projection/methods                  mlp               docker                start                                        
    label_projection/metrics             accuracy               docker                start                                        
    label_projection/metrics                   f1               docker                start
    label_projection/methods  logistic_regression               docker     build_executable         0        4              SUCCESS
    label_projection/methods  logistic_regression               docker      generic_test.py         0        9              SUCCESS
    label_projection/metrics                   f1               docker     build_executable         0        7              SUCCESS
    label_projection/metrics                   f1               docker      format_check.py         0        8              SUCCESS
    label_projection/metrics             accuracy               docker     build_executable         0        8              SUCCESS
    label_projection/metrics             accuracy               docker      format_check.py         0        7              SUCCESS
    ...
</details>

## Conclusion
Please note that if you encounter any issues during the first-time setup, there are several resources available to help you troubleshoot. These include the ["Troubleshooting"](/documentation/more_information/troubleshooting.qmd) page of this documentation and the OpenProblems community on GitHub. We encourage you to explore these resources and reach out to the community for help if needed.