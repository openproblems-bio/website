
```{r overall_ranking}
#| echo: false
results_long <-
  inner_join(
    results %>%
      unnest(metric_values) %>%
      gather(metric_id, value, any_of(metric_info$metric_id)) %>%
      mutate(value = ifelse(is.na(value), NA_real_, value)) %>%
      select(method_id, dataset_id, metric_id, value),
    results %>%
      unnest(scaled_scores) %>%
      gather(metric_id, score, any_of(metric_info$metric_id)) %>%
      mutate(score = ifelse(is.na(score), NA_real_, score)) %>%
      select(method_id, dataset_id, metric_id, score),
    by = c("method_id", "dataset_id", "metric_id")
  ) %>%
  left_join(method_info %>% select(method_id, is_baseline), "method_id") %>%
  filter(!is_baseline) %>%
  mutate(score = pmin(1, pmax(score, 0))) # clip scores to [0, 1]

overall_ranking <- results_long %>%
  group_by(method_id) %>%
  summarise(mean_score = mean(score)) %>%
  arrange(desc(mean_score))

# order by ranking
results_long$method_id <- factor(results_long$method_id, levels = rev(overall_ranking$method_id))
```

```{r funkyheatmap_data}
#| echo: false
#| message: false
#| warning: false
per_dataset <- results_long %>%
  group_by(method_id, dataset_id) %>%
  summarise(score = mean(score), .groups = "drop") %>%
  mutate(dataset_id = paste0("dataset_", dataset_id)) %>%
  spread(dataset_id, score)
per_metric <- results_long %>%
  group_by(method_id, metric_id) %>%
  summarise(score = mean(score), .groups = "drop") %>%
  mutate(metric_id = paste0("metric_", metric_id)) %>%
  spread(metric_id, score)

summary_all <- 
  method_info %>%
  filter(!is_baseline) %>%
  transmute(
    method_id,
    method_name#,
    # method_is_baseline = ifelse(is_baseline, "yes", "")
  ) %>%
  left_join(overall_ranking, by = "method_id") %>%
  left_join(per_dataset, by = "method_id") %>%
  left_join(per_metric, by = "method_id") %>%
  arrange(desc(mean_score))

column_info <- tibble(
  id = colnames(summary_all)[-1],
  name = id %>%
    gsub("^[^_]+_", "", .) %>%
    gsub("_", " ", .) %>%
    str_to_title(),
  group = gsub("_.*", "", id),
  geom = case_when(
    group == "method" ~ "text",
    group == "mean" ~ "bar",
    group %in% c("dataset", "metric") ~ "funkyrect"
  ),
  palette = ifelse(group %in% c("mean", "dataset", "metric"), group, NA_character_),
  options = map2(id, geom, function(id, geom) {
    if (id == "method_name") {
      list(width = 15, hjust = 0)
    } else if (id == "is_baseline") {
      list(width = 1)
    } else if (geom == "bar") {
      list(width = 4)
    } else {
      list()
    }
  })
)
column_groups <- tribble(
  ~Category, ~group, ~palette,
  "", "method", NA_character_,
  "Overall", "mean", "mean",
  "Dataset", "dataset", "dataset",
  "Metric", "metric", "metric"
)
palettes <- list(
  mean = "Greys",
  dataset = "Blues",
  metric = "Reds"
)

g_all <- funky_heatmap(
  data = summary_all,
  column_info = column_info %>% filter(id %in% colnames(summary_all)),
  column_groups = column_groups,
  palettes = palettes,
  expand = c(xmax = 3),
  col_annot_offset = 5,
  add_abc = FALSE,
  scale_column = FALSE
)
```

```{r}
#| include: false
knitr::opts_chunk$set(
  fig.width = g_all$width,
  fig.height = g_all$height#,
  # dev.args = list(bg = "transparent")
)
```

```{r summary}
#| echo: false
#| fig-cap: "**Overview of the results per method**. This figures shows the mean of the scaled scores (group Overall), the mean scores per dataset (group Dataset) and the mean scores per metric (group Metric)."
g_all 
# + theme(
#   panel.background = element_rect(fill = "transparent", colour = NA),
#   plot.background = element_rect(fill = "transparent", colour = NA)
# )
```