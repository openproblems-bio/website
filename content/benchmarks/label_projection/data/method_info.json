[
    {
        "task_id": "label_projection", 
        "method_id": "knn_classifier_log_cpm", 
        "method_name": "K-neighbors classifier (log CPM)", 
        "paper_name": "Nearest neighbor pattern classification", 
        "paper_url": "https://doi.org/10.1109/TIT.1967.1053964", 
        "paper_year": 1967, 
        "code_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html", 
        "image": "openproblems", 
        "is_baseline": false, 
        "code_version": null
    }, 
    {
        "task_id": "label_projection", 
        "method_id": "knn_classifier_scran", 
        "method_name": "K-neighbors classifier (log scran)", 
        "paper_name": "Nearest neighbor pattern classification", 
        "paper_url": "https://doi.org/10.1109/TIT.1967.1053964", 
        "paper_year": 1967, 
        "code_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html", 
        "image": "openproblems-r-base", 
        "is_baseline": false, 
        "code_version": null
    }, 
    {
        "task_id": "label_projection", 
        "method_id": "logistic_regression_log_cpm", 
        "method_name": "Logistic regression (log CPM)", 
        "paper_name": "Applied Logistic Regression", 
        "paper_url": "https://books.google.com/books?id=64JYAwAAQBAJ", 
        "paper_year": 2013, 
        "code_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html", 
        "image": "openproblems", 
        "is_baseline": false, 
        "code_version": null
    }, 
    {
        "task_id": "label_projection", 
        "method_id": "logistic_regression_scran", 
        "method_name": "Logistic regression (log scran)", 
        "paper_name": "Applied Logistic Regression", 
        "paper_url": "https://books.google.com/books?id=64JYAwAAQBAJ", 
        "paper_year": 2013, 
        "code_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html", 
        "image": "openproblems-r-base", 
        "is_baseline": false, 
        "code_version": null
    }, 
    {
        "task_id": "label_projection", 
        "method_id": "majority_vote", 
        "method_name": "Majority Vote", 
        "paper_name": "Majority Vote (baseline)", 
        "paper_url": "https://openproblems.bio", 
        "paper_year": 2022, 
        "code_url": "https://github.com/openproblems-bio/openproblems", 
        "image": "openproblems", 
        "is_baseline": false, 
        "code_version": null
    }, 
    {
        "task_id": "label_projection", 
        "method_id": "mlp_log_cpm", 
        "method_name": "Multilayer perceptron (log CPM)", 
        "paper_name": "Connectionist learning procedures", 
        "paper_url": "https://doi.org/10.1016/0004-3702(89)90049-0", 
        "paper_year": 1990, 
        "code_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPClassifier.html", 
        "image": "openproblems", 
        "is_baseline": false, 
        "code_version": null
    }, 
    {
        "task_id": "label_projection", 
        "method_id": "mlp_scran", 
        "method_name": "Multilayer perceptron (log scran)", 
        "paper_name": "Connectionist learning procedures", 
        "paper_url": "https://doi.org/10.1016/0004-3702(89)90049-0", 
        "paper_year": 1990, 
        "code_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPClassifier.html", 
        "image": "openproblems-r-base", 
        "is_baseline": false, 
        "code_version": null
    }, 
    {
        "task_id": "label_projection", 
        "method_id": "random_labels", 
        "method_name": "Random Labels", 
        "paper_name": "Random Labels (baseline)", 
        "paper_url": "https://openproblems.bio", 
        "paper_year": 2022, 
        "code_url": "https://github.com/openproblems-bio/openproblems", 
        "image": "openproblems", 
        "is_baseline": true, 
        "code_version": null
    }, 
    {
        "task_id": "label_projection", 
        "method_id": "scanvi_all_genes", 
        "method_name": "scANVI (All genes)", 
        "paper_name": "Probabilistic harmonization and annotation of single-cell transcriptomics data with deep generative models", 
        "paper_url": "https://doi.org/10.15252/msb.20209620", 
        "paper_year": 2021, 
        "code_url": "https://github.com/YosefLab/scvi-tools", 
        "image": "openproblems-python-pytorch", 
        "is_baseline": false, 
        "code_version": null
    }, 
    {
        "task_id": "label_projection", 
        "method_id": "scanvi_hvg", 
        "method_name": "scANVI (Seurat v3 2000 HVG)", 
        "paper_name": "Probabilistic harmonization and annotation of single-cell transcriptomics data with deep generative models", 
        "paper_url": "https://doi.org/10.15252/msb.20209620", 
        "paper_year": 2021, 
        "code_url": "https://github.com/YosefLab/scvi-tools", 
        "image": "openproblems-python-pytorch", 
        "is_baseline": false, 
        "code_version": null
    }, 
    {
        "task_id": "label_projection", 
        "method_id": "scarches_scanvi_all_genes", 
        "method_name": "scArches+scANVI (All genes)", 
        "paper_name": "Query to reference single-cell integration with transfer learning", 
        "paper_url": "https://doi.org/10.1101/2020.07.16.205997", 
        "paper_year": 2021, 
        "code_url": "https://github.com/YosefLab/scvi-tools", 
        "image": "openproblems-python-pytorch", 
        "is_baseline": false, 
        "code_version": null
    }, 
    {
        "task_id": "label_projection", 
        "method_id": "scarches_scanvi_hvg", 
        "method_name": "scArches+scANVI (Seurat v3 2000 HVG)", 
        "paper_name": "Query to reference single-cell integration with transfer learning", 
        "paper_url": "https://doi.org/10.1101/2020.07.16.205997", 
        "paper_year": 2021, 
        "code_url": "https://github.com/YosefLab/scvi-tools", 
        "image": "openproblems-python-pytorch", 
        "is_baseline": false, 
        "code_version": null
    }, 
    {
        "task_id": "label_projection", 
        "method_id": "seurat", 
        "method_name": "Seurat reference mapping (SCTransform)", 
        "paper_name": "Integrated analysis of multimodal single-cell data", 
        "paper_url": "https://doi.org/10.1016/j.cell.2021.04.048", 
        "paper_year": 2021, 
        "code_url": "https://github.com/satijalab/seurat", 
        "image": "openproblems-r-extras", 
        "is_baseline": false, 
        "code_version": null
    }, 
    {
        "task_id": "label_projection", 
        "method_id": "true_labels", 
        "method_name": "True Labels", 
        "paper_name": "True Labels (baseline)", 
        "paper_url": "https://openproblems.bio", 
        "paper_year": 2022, 
        "code_url": "https://github.com/openproblems-bio/openproblems", 
        "image": "openproblems", 
        "is_baseline": true, 
        "code_version": null
    }, 
    {
        "task_id": "label_projection", 
        "method_id": "xgboost_log_cpm", 
        "method_name": "XGBoost (log CPM)", 
        "paper_name": "XGBoost: A Scalable Tree Boosting System", 
        "paper_url": "https://doi.org/10.1145/2939672.2939785", 
        "paper_year": 2016, 
        "code_url": "https://xgboost.readthedocs.io/en/stable/index.html", 
        "image": "openproblems-python-extras", 
        "is_baseline": false, 
        "code_version": null
    }, 
    {
        "task_id": "label_projection", 
        "method_id": "xgboost_scran", 
        "method_name": "XGBoost (log scran)", 
        "paper_name": "XGBoost: A Scalable Tree Boosting System", 
        "paper_url": "https://doi.org/10.1145/2939672.2939785", 
        "paper_year": 2016, 
        "code_url": "https://xgboost.readthedocs.io/en/stable/index.html", 
        "image": "openproblems-r-extras", 
        "is_baseline": false, 
        "code_version": null
    }
]