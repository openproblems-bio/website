[
  {
    "task_id": "control_methods",
    "method_id": "majority_vote",
    "method_name": "Majority Vote",
    "method_summary": "A control-type method that predicts all cells to belong to the most abundant cell type in the dataset",
    "method_description": "A control-type method that predicts all cells to belong to the most abundant cell type in the dataset",
    "is_baseline": true,
    "references_doi": null,
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_label_projection",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_label_projection/control_methods/majority_vote:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_label_projection/blob/0def7c62cbda5cdf52c7406a06f91d9e36a5535d/src/control_methods/majority_vote",
    "code_version": "build_main",
    "commit_sha": "0def7c62cbda5cdf52c7406a06f91d9e36a5535d"
  },
  {
    "task_id": "control_methods",
    "method_id": "random_labels",
    "method_name": "Random Labels",
    "method_summary": "a negative control, where the labels are randomly predicted.",
    "method_description": "A negative control, where the labels are randomly predicted without training the data.",
    "is_baseline": true,
    "references_doi": null,
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_label_projection",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_label_projection/control_methods/random_labels:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_label_projection/blob/0def7c62cbda5cdf52c7406a06f91d9e36a5535d/src/control_methods/random_labels",
    "code_version": "build_main",
    "commit_sha": "0def7c62cbda5cdf52c7406a06f91d9e36a5535d"
  },
  {
    "task_id": "control_methods",
    "method_id": "true_labels",
    "method_name": "True labels",
    "method_summary": "a positive control, solution labels are copied 1 to 1 to the predicted data.",
    "method_description": "A positive control, where the solution labels are copied 1 to 1 to the predicted data.",
    "is_baseline": true,
    "references_doi": null,
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_label_projection",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_label_projection/control_methods/true_labels:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_label_projection/blob/0def7c62cbda5cdf52c7406a06f91d9e36a5535d/src/control_methods/true_labels",
    "code_version": "build_main",
    "commit_sha": "0def7c62cbda5cdf52c7406a06f91d9e36a5535d"
  },
  {
    "task_id": "methods",
    "method_id": "geneformer",
    "method_name": "Geneformer",
    "method_summary": "Geneformer is a foundational transformer model pretrained on a large-scale corpus of single cell transcriptomes to enable context-aware predictions in settings with limited data in network biology.",
    "method_description": "Geneformer is a context-aware, attention-based deep learning model pretrained on a large-scale corpus of single-cell transcriptomes to enable context-specific predictions in settings with limited data in network biology. Here, a pre-trained Geneformer model is fine-tuned and used to predict cell type labels for an unlabelled dataset.\n",
    "is_baseline": false,
    "references_doi": ["10.1038/s41586-023-06139-9", "10.1101/2024.08.16.608180"],
    "references_bibtex": null,
    "code_url": "https://huggingface.co/ctheodoris/Geneformer",
    "documentation_url": "https://geneformer.readthedocs.io/en/latest/index.html",
    "image": "https://ghcr.io/openproblems-bio/task_label_projection/methods/geneformer:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_label_projection/blob/0def7c62cbda5cdf52c7406a06f91d9e36a5535d/src/methods/geneformer",
    "code_version": "build_main",
    "commit_sha": "0def7c62cbda5cdf52c7406a06f91d9e36a5535d"
  },
  {
    "task_id": "methods",
    "method_id": "knn",
    "method_name": "KNN",
    "method_summary": "Assumes cells with similar gene expression belong to the same cell type, and assigns an unlabelled cell the most common cell type among its k nearest neighbors in PCA space.",
    "method_description": "Using the \"k-nearest neighbours\" approach, which is a\npopular machine learning algorithm for classification and regression tasks.\nThe assumption underlying KNN in this context is that cells with similar gene\nexpression profiles tend to belong to the same cell type. For each unlabelled\ncell, this method computes the $k$ labelled cells (in this case, 5) with the\nsmallest distance in PCA space, and assigns that cell the most common cell\ntype among its $k$ nearest neighbors.\n",
    "is_baseline": false,
    "references_doi": "10.1109/tit.1967.1053964",
    "references_bibtex": null,
    "code_url": "https://github.com/scikit-learn/scikit-learn",
    "documentation_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html",
    "image": "https://ghcr.io/openproblems-bio/task_label_projection/methods/knn:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_label_projection/blob/0def7c62cbda5cdf52c7406a06f91d9e36a5535d/src/methods/knn",
    "code_version": "build_main",
    "commit_sha": "0def7c62cbda5cdf52c7406a06f91d9e36a5535d"
  },
  {
    "task_id": "methods",
    "method_id": "logistic_regression",
    "method_name": "Logistic Regression",
    "method_summary": "Logistic Regression with 100-dimensional PCA coordinates estimates parameters for multivariate classification by minimizing cross entropy loss over cell type classes.",
    "method_description": "Logistic Regression estimates parameters of a logistic function for\nmultivariate classification tasks. Here, we use 100-dimensional whitened PCA\ncoordinates as independent variables, and the model minimises the cross\nentropy loss over all cell type classes.\n",
    "is_baseline": false,
    "references_doi": null,
    "references_bibtex": "@book{hosmer2013applied,\n  title = {Applied logistic regression},\n  author = {Hosmer Jr, D.W. and Lemeshow, S. and Sturdivant, R.X.},\n  year = {2013},\n  publisher = {John Wiley \\& Sons},\n  volume = {398}\n}\n",
    "code_url": "https://github.com/scikit-learn/scikit-learn",
    "documentation_url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html",
    "image": "https://ghcr.io/openproblems-bio/task_label_projection/methods/logistic_regression:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_label_projection/blob/0def7c62cbda5cdf52c7406a06f91d9e36a5535d/src/methods/logistic_regression",
    "code_version": "build_main",
    "commit_sha": "0def7c62cbda5cdf52c7406a06f91d9e36a5535d"
  },
  {
    "task_id": "methods",
    "method_id": "mlp",
    "method_name": "Multilayer perceptron",
    "method_summary": "A neural network with 100-dimensional PCA input, two hidden layers, and gradient descent weight updates to minimize cross entropy loss.",
    "method_description": "Multi-Layer Perceptron is a type of artificial neural network that\nconsists of multiple layers of interconnected neurons. Each neuron computes a\nweighted sum of all neurons in the previous layer and transforms it with\nnonlinear activation function. The output layer provides the final\nprediction, and network weights are updated by gradient descent to minimize\nthe cross entropy loss. Here, the input data is 100-dimensional whitened PCA\ncoordinates for each cell, and we use two hidden layers of 100 neurons each.\n",
    "is_baseline": false,
    "references_doi": "10.1016/0004-3702(89)90049-0",
    "references_bibtex": null,
    "code_url": "https://github.com/scikit-learn/scikit-learn",
    "documentation_url": "https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPClassifier.html",
    "image": "https://ghcr.io/openproblems-bio/task_label_projection/methods/mlp:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_label_projection/blob/0def7c62cbda5cdf52c7406a06f91d9e36a5535d/src/methods/mlp",
    "code_version": "build_main",
    "commit_sha": "0def7c62cbda5cdf52c7406a06f91d9e36a5535d"
  },
  {
    "task_id": "methods",
    "method_id": "naive_bayes",
    "method_name": "Naive Bayesian Classifier",
    "method_summary": "Naive Bayes classification using feature probabilities to project cell type labels from a reference dataset.",
    "method_description": "Naive Bayes classification leverages probabilistic models based on Bayes' theorem\nto classify cells into different types. In the context of single-cell datasets, this method\nutilizes the probabilities of features to project cell type labels from a reference dataset\nto new datasets. The algorithm assumes independence between features, making it computationally\nefficient and well-suited for high-dimensional data. It is particularly useful for annotating\ncells in atlas-scale datasets, ensuring consistency and alignment with existing reference annotations.\n",
    "is_baseline": false,
    "references_doi": null,
    "references_bibtex": "@book{hosmer2013applied,\n  title={Applied logistic regression},\n  author={Hosmer, David W and Lemeshow, Stanley and Sturdivant, Rodney X},\n  year={2013},\n  publisher={John Wiley \\& Sons}\n}\n",
    "code_url": "https://github.com/scikit-learn/scikit-learn",
    "documentation_url": "https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.GaussianNB.html",
    "image": "https://ghcr.io/openproblems-bio/task_label_projection/methods/naive_bayes:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_label_projection/blob/0def7c62cbda5cdf52c7406a06f91d9e36a5535d/src/methods/naive_bayes",
    "code_version": "build_main",
    "commit_sha": "0def7c62cbda5cdf52c7406a06f91d9e36a5535d"
  },
  {
    "task_id": "methods",
    "method_id": "scanvi",
    "method_name": "scANVI",
    "method_summary": "scANVI predicts cell type labels for unlabelled test data by leveraging cell type labels, modelling uncertainty and using deep neural networks with stochastic optimization.",
    "method_description": "single-cell ANnotation using Variational Inference is a\nsemi-supervised variant of the scVI(Lopez et al. 2018) algorithm. Like scVI,\nscANVI uses deep neural networks and stochastic optimization to model\nuncertainty caused by technical noise and bias in single - cell\ntranscriptomics measurements. However, scANVI also leverages cell type labels\nin the generative modelling. In this approach, scANVI is used to predict the\ncell type labels of the unlabelled test data.\n",
    "is_baseline": false,
    "references_doi": "10.1101/2020.07.16.205997",
    "references_bibtex": null,
    "code_url": "https://github.com/scverse/scvi-tools",
    "documentation_url": "https://scarches.readthedocs.io/en/latest/scanvi_surgery_pipeline.html",
    "image": "https://ghcr.io/openproblems-bio/task_label_projection/methods/scanvi:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_label_projection/blob/0def7c62cbda5cdf52c7406a06f91d9e36a5535d/src/methods/scanvi",
    "code_version": "build_main",
    "commit_sha": "0def7c62cbda5cdf52c7406a06f91d9e36a5535d"
  },
  {
    "task_id": "methods",
    "method_id": "scanvi_scarches",
    "method_name": "scANVI+scArches",
    "method_summary": "Query to reference single-cell integration with transfer learning with scANVI and scArches",
    "method_description": "scArches+scANVI or \"Single-cell architecture surgery\" is a deep learning method for mapping new datasets onto a pre-existing reference model, using transfer learning and parameter optimization. It first uses scANVI to build a reference model from the training data, and then apply scArches to map the test data onto the reference model and make predictions.",
    "is_baseline": false,
    "references_doi": "10.1101/2020.07.16.205997",
    "references_bibtex": null,
    "code_url": "https://github.com/scverse/scvi-tools",
    "documentation_url": "https://docs.scvi-tools.org",
    "image": "https://ghcr.io/openproblems-bio/task_label_projection/methods/scanvi_scarches:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_label_projection/blob/0def7c62cbda5cdf52c7406a06f91d9e36a5535d/src/methods/scanvi_scarches",
    "code_version": "build_main",
    "commit_sha": "0def7c62cbda5cdf52c7406a06f91d9e36a5535d"
  },
  {
    "task_id": "methods",
    "method_id": "scgpt_zero_shot",
    "method_name": "scGPT zero-shot",
    "method_summary": "Reference mapping using cell embedding by pretrained scGPT model.",
    "method_description": "scGPT is a foundation model for single-cell biology based on a generative pre-trained transformer and trained on a repository of over 33 million cells. Following the zero-shot approach, a pre-trained scGPT model is used to embed cells and map unlabelled cells in a query set to the reference dataset with provided annotations based on a nearest neighbor similarity search. \n",
    "is_baseline": false,
    "references_doi": "10.1038/s41592-024-02201-0",
    "references_bibtex": null,
    "code_url": "https://github.com/bowang-lab/scGPT",
    "documentation_url": "https://scgpt.readthedocs.io/en/latest/",
    "image": "https://ghcr.io/openproblems-bio/task_label_projection/methods/scgpt_zero_shot:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_label_projection/blob/0def7c62cbda5cdf52c7406a06f91d9e36a5535d/src/methods/scgpt_zero_shot",
    "code_version": "build_main",
    "commit_sha": "0def7c62cbda5cdf52c7406a06f91d9e36a5535d"
  },
  {
    "task_id": "methods",
    "method_id": "scimilarity",
    "method_name": "SCimilarity",
    "method_summary": "SCimilarity provides unifying representation of single cell expression profiles",
    "method_description": "SCimilarity is a unifying representation of single cell expression profiles\nthat quantifies similarity between expression states and generalizes to\nrepresent new studies without additional training.\n\nThis method uses the SCimilarity cell annotation module. As labels in the\nSCimilarity model are likely to be different to those in the dataset we use\na combination of exact string matching and iterative linear sum assignment to\nmatch generate a mapping between them using the training data.\n",
    "is_baseline": false,
    "references_doi": "10.1101/2023.07.18.549537",
    "references_bibtex": null,
    "code_url": "https://github.com/Genentech/scimilarity",
    "documentation_url": "https://genentech.github.io/scimilarity/index.html",
    "image": "https://ghcr.io/openproblems-bio/task_label_projection/methods/scimilarity:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_label_projection/blob/0def7c62cbda5cdf52c7406a06f91d9e36a5535d/src/methods/scimilarity",
    "code_version": "build_main",
    "commit_sha": "0def7c62cbda5cdf52c7406a06f91d9e36a5535d"
  },
  {
    "task_id": "methods",
    "method_id": "scimilarity_knn",
    "method_name": "SCimilarity (kNN)",
    "method_summary": "SCimilarity provides unifying representation of single cell expression profiles",
    "method_description": "SCimilarity is a unifying representation of single cell expression profiles\nthat quantifies similarity between expression states and generalizes to\nrepresent new studies without additional training.\n\nThis method trains a kNN classifier using cell embeddings from SCimilarity.\nThe classifier is trained on embeddings for the training data and used to\npredict labels for the test data. This does not use the SCimilarity cell\nannotation model but avoids needing to match SCimilarity labels to dataset\nlabels.\n",
    "is_baseline": false,
    "references_doi": "10.1101/2023.07.18.549537",
    "references_bibtex": null,
    "code_url": "https://github.com/Genentech/scimilarity",
    "documentation_url": "https://genentech.github.io/scimilarity/index.html",
    "image": "https://ghcr.io/openproblems-bio/task_label_projection/methods/scimilarity_knn:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_label_projection/blob/0def7c62cbda5cdf52c7406a06f91d9e36a5535d/src/methods/scimilarity_knn",
    "code_version": "build_main",
    "commit_sha": "0def7c62cbda5cdf52c7406a06f91d9e36a5535d"
  },
  {
    "task_id": "methods",
    "method_id": "scprint",
    "method_name": "scPRINT",
    "method_summary": "scPRINT is a large transformer model built for the inference of gene networks",
    "method_description": "scPRINT is a large transformer model built for the inference of gene networks\n(connections between genes explaining the cell's expression profile) from\nscRNAseq data.\n\nIt uses novel encoding and decoding of the cell expression profile and new\npre-training methodologies to learn a cell model.\n\nscPRINT can be used to perform the following analyses:\n  - expression denoising: increase the resolution of your scRNAseq data\n  - cell embedding: generate a low-dimensional representation of your dataset\n  - label prediction: predict the cell type, disease, sequencer, sex, and\n    ethnicity of your cells\n  - gene network inference: generate a gene network from any cell or cell\n    cluster in your scRNAseq dataset\n\nThis method uses the zero-shot ability of scPRINT for cell type prediction. \nAs some predicted labels are likely to be different to those in the reference \ndataset, we use a combination of exact string matching and iterative linear sum \nassignment to generate a mapping between them using the training data.\n",
    "is_baseline": false,
    "references_doi": "10.1101/2024.07.29.605556",
    "references_bibtex": null,
    "code_url": "https://github.com/cantinilab/scPRINT",
    "documentation_url": "https://cantinilab.github.io/scPRINT/",
    "image": "https://ghcr.io/openproblems-bio/task_label_projection/methods/scprint:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_label_projection/blob/0def7c62cbda5cdf52c7406a06f91d9e36a5535d/src/methods/scprint",
    "code_version": "build_main",
    "commit_sha": "0def7c62cbda5cdf52c7406a06f91d9e36a5535d"
  },
  {
    "task_id": "methods",
    "method_id": "seurat_transferdata",
    "method_name": "Seurat TransferData",
    "method_summary": "Seurat reference mapping predicts cell types for unlabelled cells using PCA distances, labelled anchors, and transfer anchors from Seurat, with SCTransform normalization.",
    "method_description": "Seurat reference mapping is a cell type label transfer method provided by the\nSeurat package. Gene expression counts are first normalised by SCTransform\nbefore computing PCA. Then it finds mutual nearest neighbours, known as\ntransfer anchors, between the labelled and unlabelled part of the data in PCA\nspace, and computes each cell's distance to each of the anchor pairs.\nFinally, it uses the labelled anchors to predict cell types for unlabelled\ncells based on these distances.\n",
    "is_baseline": false,
    "references_doi": "10.1016/j.cell.2021.04.048",
    "references_bibtex": null,
    "code_url": "https://github.com/satijalab/seurat",
    "documentation_url": "https://satijalab.org/seurat/articles/integration_mapping.html",
    "image": "https://ghcr.io/openproblems-bio/task_label_projection/methods/seurat_transferdata:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_label_projection/blob/0def7c62cbda5cdf52c7406a06f91d9e36a5535d/src/methods/seurat_transferdata",
    "code_version": "build_main",
    "commit_sha": "0def7c62cbda5cdf52c7406a06f91d9e36a5535d"
  },
  {
    "task_id": "methods",
    "method_id": "singler",
    "method_name": "SingleR",
    "method_summary": "Reference-Based Single-Cell RNA-Seq Annotation",
    "method_description": "Performs unbiased cell type recognition from single-cell RNA sequencing data,\nby leveraging reference transcriptomic datasets of pure cell types to infer the\ncell of origin of each single cell independently.\n",
    "is_baseline": false,
    "references_doi": "10.1038/s41590-018-0276-y",
    "references_bibtex": null,
    "code_url": "https://www.bioconductor.org/packages/release/bioc/html/SingleR.html",
    "documentation_url": "https://www.bioconductor.org/packages/release/bioc/vignettes/SingleR/inst/doc/SingleR.html",
    "image": "https://ghcr.io/openproblems-bio/task_label_projection/methods/singler:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_label_projection/blob/0def7c62cbda5cdf52c7406a06f91d9e36a5535d/src/methods/singler",
    "code_version": "build_main",
    "commit_sha": "0def7c62cbda5cdf52c7406a06f91d9e36a5535d"
  },
  {
    "task_id": "methods",
    "method_id": "uce",
    "method_name": "UCE",
    "method_summary": "UCE offers a unified biological latent space that can represent any cell",
    "method_description": "Universal Cell Embedding (UCE) is a single-cell foundation model that offers a\nunified biological latent space that can represent any cell, regardless of\ntissue or species.\n\nThis method trains a logistic regression classifier on the UCE embedding\nspace.\n",
    "is_baseline": false,
    "references_doi": "10.1101/2023.11.28.568918",
    "references_bibtex": null,
    "code_url": "https://github.com/snap-stanford/UCE",
    "documentation_url": "https://github.com/snap-stanford/UCE/blob/main/README.md",
    "image": "https://ghcr.io/openproblems-bio/task_label_projection/methods/uce:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_label_projection/blob/0def7c62cbda5cdf52c7406a06f91d9e36a5535d/src/methods/uce",
    "code_version": "build_main",
    "commit_sha": "0def7c62cbda5cdf52c7406a06f91d9e36a5535d"
  },
  {
    "task_id": "methods",
    "method_id": "xgboost",
    "method_name": "XGBoost",
    "method_summary": "XGBoost is a decision tree model that averages multiple trees with gradient boosting.",
    "method_description": "XGBoost is a gradient boosting decision tree model that learns multiple tree\nstructures in the form of a series of input features and their values,\nleading to a prediction decision, and averages predictions from all its\ntrees. Here, input features are normalised gene expression values.\n",
    "is_baseline": false,
    "references_doi": "10.1145/2939672.2939785",
    "references_bibtex": null,
    "code_url": "https://github.com/dmlc/xgboost",
    "documentation_url": "https://xgboost.readthedocs.io/en/stable/index.html",
    "image": "https://ghcr.io/openproblems-bio/task_label_projection/methods/xgboost:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_label_projection/blob/0def7c62cbda5cdf52c7406a06f91d9e36a5535d/src/methods/xgboost",
    "code_version": "build_main",
    "commit_sha": "0def7c62cbda5cdf52c7406a06f91d9e36a5535d"
  }
]
