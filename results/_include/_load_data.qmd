

```{r setup}
#| include: false
#| error: true

library(tidyverse)
library(funkyheatmap)
library(kableExtra)

# read task info
task_info <- jsonlite::read_json(paste0(params$data_dir, "/task_info.json"))

# add missing data
task_info$task_description <- task_info$task_description %||% NA_character_
task_info$task_motivation <- task_info$task_motivation %||% NA_character_

`%|%` <- function(x, y) {
  ifelse(is.na(x), y, x)
}

method_info <- jsonlite::read_json(paste0(params$data_dir, "/method_info.json"), simplifyVector = TRUE)
metric_info <- jsonlite::read_json(paste0(params$data_dir, "/metric_info.json"), simplifyVector = TRUE)
dataset_info <- jsonlite::read_json(paste0(params$data_dir, "/dataset_info.json"), simplifyVector = TRUE)
results <- jsonlite::read_json(paste0(params$data_dir, "/results.json"), simplifyVector = TRUE)
qc <- jsonlite::read_json(paste0(params$data_dir, "/quality_control.json"), simplifyVector = TRUE)

# add missing columns
for (col in c("method_summary")) {
  method_info[[col]] <- method_info[[col]] %||% NA_character_
}
for (col in c("metric_summary")) {
  metric_info[[col]] <- metric_info[[col]] %||% NA_character_
}
for (col in c("dataset_summary", "dataset_name")) {
  dataset_info[[col]] <- dataset_info[[col]] %||% NA_character_
}

# fill missing data
dataset_info$dataset_name <- dataset_info$dataset_name %|% dataset_info$dataset_id

split_cite_fun <- function(keys) {
  if (is.null(keys)) return("")
  
  keys <- keys[!is.na(keys)]
  if (length(keys) == 0) return("")

  refs <- unlist(stringr::str_split(keys, ", *"))
  # inner_str <- sapply(refs, function(ref) cite_fun(ref, format = format))
  # paste0("<sup>", paste(inner_str, collapse = ", "), "</sup>")
  # paste0("[", paste(inner_str, collapse = ", "), "]")
  paste0("[@", paste(refs, collapse = "; @"), "]")
}
```


```{r overall_ranking}
#| echo: false
results_long <-
  inner_join(
    results %>%
      select(method_id, dataset_id, metric_values) %>%
      unnest(metric_values) %>%
      gather(metric_id, value, any_of(metric_info$metric_id)) %>%
      mutate(value = ifelse(is.na(value), NA_real_, value)),
    results %>%
      select(method_id, dataset_id, scaled_scores) %>%
      unnest(scaled_scores) %>%
      gather(metric_id, score, any_of(metric_info$metric_id)) %>%
      mutate(score = ifelse(is.na(score), NA_real_, score)),
    by = c("method_id", "dataset_id", "metric_id")
  ) %>%
  left_join(method_info %>% select(method_id, is_baseline), "method_id")

overall_ranking <- results_long %>%
  group_by(method_id) %>%
  summarise(mean_score = mean(score %|% 0)) %>%
  arrange(desc(mean_score))

# order by ranking
results_long$method_id <- factor(results_long$method_id, levels = rev(overall_ranking$method_id))
results$method_id <- factor(results$method_id, levels = rev(overall_ranking$method_id))
method_info$method_id <- factor(method_info$method_id, levels = rev(overall_ranking$method_id))
```