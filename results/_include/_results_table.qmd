Results table of the scores per method, dataset and metric (after scaling). Use the filters to make a custom subselection of methods and datasets. The "Overall mean" dataset is the mean value across all datasets.

```{r resultstable}
#| echo: false
res_tib0 <- results %>%
  unnest(metric_values) %>%
  unnest(resources) %>%
  left_join(method_info %>% select(-commit_sha, -code_version, -task_id), by = "method_id") %>%
  filter(!is_baseline) %>%
  left_join(dataset_info %>% select(dataset_id), by = "dataset_id")

mean_na_zero <- function(x) {
  mean(ifelse(is.na(x), 0, x))
}

res_tib1 <- res_tib0 %>% 
  group_by(method_id, method_name, paper_reference, code_url) %>%
  summarise_if(is.numeric, mean_na_zero) %>%
  ungroup() %>%
  mutate(
    dataset_id = "Overall mean"
  ) %>%
  bind_rows(res_tib0)

  
res_tib <- res_tib1 %>%
  arrange(desc(mean_score)) %>%
  rowwise() %>%
  mutate(
    method_label = ifelse(is.na(paper_reference), method_name, glue::glue("{method_name} <sup>{cite_fun(paper_reference, format = 'html')}</sup>")),
    # dataset_label = ifelse(is.na(data_reference), dataset_name, glue::glue("{dataset_name} <sup>{cite_fun(data_reference, format = 'html')}</sup>")),
    # method_label = method_name,
    dataset_label = dataset_id,
    peak_memory_gb = peak_memory_mb / 1024
  ) %>%
  ungroup() %>%
  select(
    method_label,
    dataset_label,
    mean_score,
    any_of(metric_info$metric_id),
    duration_sec,
    cpu_pct,
    peak_memory_gb
  )

res_cn <- c(
  "Method",
  "Dataset",
  "Mean score",
  metric_info$metric_name,
  "Runtime (s)",
  "CPU (%)",
  "Memory (GB)"
)

dt <- DT::datatable(
  res_tib,
  colnames = res_cn,
  options = list(
    dom = "Pt",
    paging = FALSE,
    columnDefs = list(
      list(
        searchPanes = list(show = FALSE),
        targets = seq(2, ncol(res_tib)-1)
      )
    ),
    searchPanes = list(
      initCollapsed = TRUE,
      preSelect = list(
        list(
          rows = c( "Overall mean"),
          column = 1
        )
      )
    ),
    buttons = list(
      "searchPanes",
      "csv",
      "excel"
    ),
    scrollX = TRUE
  ),
  escape = FALSE,
  class = "stripe compact",
  rownames = FALSE,
  extensions = c("Select", "SearchPanes")
) %>%
  DT::formatRound(c("peak_memory_gb", "mean_score", metric_info$metric_id), digits = 2) %>%
  DT::formatRound(c("cpu_pct", "duration_sec"), digits = 0) %>%
  DT::formatStyle(seq_len(ncol(res_tib)), fontSize = "80%")

dt
```