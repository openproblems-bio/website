[
  {
    "task_id": "control_methods",
    "method_id": "embed_cell_types",
    "method_name": "Embed cell types",
    "method_summary": "Cells are embedded as a one-hot encoding of celltype labels",
    "method_description": "Cells are embedded as a one-hot encoding of celltype labels",
    "is_baseline": true,
    "references_doi": null,
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_batch_integration",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/control_methods/embed_cell_types:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/control_methods/embed_cell_types",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "control_methods",
    "method_id": "embed_cell_types_jittered",
    "method_name": "Perfect embedding by celltype with jitter",
    "method_summary": "Cells are embedded as a one-hot encoding of celltype labels, with a small amount of random noise added to the embedding",
    "method_description": "Cells are embedded as a one-hot encoding of celltype labels, with a small amount of random noise added to the embedding",
    "is_baseline": true,
    "references_doi": null,
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_batch_integration",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/control_methods/embed_cell_types_jittered:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/control_methods/embed_cell_types_jittered",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "control_methods",
    "method_id": "no_integration",
    "method_name": "No integration",
    "method_summary": "Original feature space is not modified",
    "method_description": "Original feature space is not modified",
    "is_baseline": true,
    "references_doi": null,
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_batch_integration",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/control_methods/no_integration:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/control_methods/no_integration",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "control_methods",
    "method_id": "no_integration_batch",
    "method_name": "No integration by Batch",
    "method_summary": "Cells are embedded by computing PCA independently on each batch",
    "method_description": "Cells are embedded by computing PCA independently on each batch",
    "is_baseline": true,
    "references_doi": null,
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_batch_integration",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/control_methods/no_integration_batch:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/control_methods/no_integration_batch",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "control_methods",
    "method_id": "shuffle_integration",
    "method_name": "Shuffle integration",
    "method_summary": "Integrations are randomly permuted",
    "method_description": "Integrations are randomly permuted",
    "is_baseline": true,
    "references_doi": null,
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_batch_integration",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/control_methods/shuffle_integration:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/control_methods/shuffle_integration",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "control_methods",
    "method_id": "shuffle_integration_by_batch",
    "method_name": "Shuffle integration by batch",
    "method_summary": "Integrations are randomly permuted within each batch",
    "method_description": "Integrations are randomly permuted within each batch",
    "is_baseline": true,
    "references_doi": null,
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_batch_integration",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/control_methods/shuffle_integration_by_batch:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/control_methods/shuffle_integration_by_batch",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "control_methods",
    "method_id": "shuffle_integration_by_cell_type",
    "method_name": "Shuffle integration by cell type",
    "method_summary": "Integrations are randomly permuted within each cell type",
    "method_description": "Integrations are randomly permuted within each cell type",
    "is_baseline": true,
    "references_doi": null,
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_batch_integration",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/control_methods/shuffle_integration_by_cell_type:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/control_methods/shuffle_integration_by_cell_type",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "methods",
    "method_id": "batchelor_fastmnn",
    "method_name": "batchelor fastMNN",
    "method_summary": "Fast mutual nearest neighbors correction",
    "method_description": "The fastMNN() approach is much simpler than the original mnnCorrect() algorithm, and proceeds in several steps.\n\n1. Perform a multi-sample PCA on the (cosine-)normalized expression values to reduce dimensionality.\n2. Identify MNN pairs in the low-dimensional space between a reference batch and a target batch.\n3. Remove variation along the average batch vector in both reference and target batches.\n4. Correct the cells in the target batch towards the reference, using locally weighted correction vectors.\n5. Merge the corrected target batch with the reference, and repeat with the next target batch.\n",
    "is_baseline": false,
    "references_doi": "10.1038/nbt.4091",
    "references_bibtex": null,
    "code_url": "https://github.com/LTLA/batchelor",
    "documentation_url": "https://bioconductor.org/packages/batchelor/",
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/methods/batchelor_fastmnn:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/methods/batchelor_fastmnn",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "methods",
    "method_id": "batchelor_mnn_correct",
    "method_name": "batchelor mnnCorrect",
    "method_summary": "Mutual nearest neighbors correction",
    "method_description": "Correct for batch effects in single-cell expression data using the mutual nearest neighbors method.\n",
    "is_baseline": false,
    "references_doi": "10.1038/nbt.4091",
    "references_bibtex": null,
    "code_url": "https://github.com/LTLA/batchelor",
    "documentation_url": "https://bioconductor.org/packages/batchelor/",
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/methods/batchelor_mnn_correct:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/methods/batchelor_mnn_correct",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "methods",
    "method_id": "bbknn",
    "method_name": "BBKNN",
    "method_summary": "BBKNN creates k nearest neighbours graph by identifying neighbours within batches, then combining and processing them with UMAP for visualization.",
    "method_description": "\"BBKNN or batch balanced k nearest neighbours graph is built for each cell by\nidentifying its k nearest neighbours within each defined batch separately,\ncreating independent neighbour sets for each cell in each batch. These sets\nare then combined and processed with the UMAP algorithm for visualisation.\"\n",
    "is_baseline": false,
    "references_doi": "10.1093/bioinformatics/btz625",
    "references_bibtex": null,
    "code_url": "https://github.com/Teichlab/bbknn",
    "documentation_url": "https://github.com/Teichlab/bbknn#readme",
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/methods/bbknn:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/methods/bbknn",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "methods",
    "method_id": "combat",
    "method_name": "Combat",
    "method_summary": "Adjusting batch effects in microarray expression data using empirical Bayes methods",
    "method_description": "\"An Empirical Bayes (EB) approach to correct for batch effects. It\nestimates batch-specific parameters by pooling information across genes in\neach batch and shrinks the estimates towards the overall mean of the batch\neffect estimates across all genes. These parameters are then used to adjust\nthe data for batch effects, leading to more accurate and reproducible\nresults.\"\n",
    "is_baseline": false,
    "references_doi": "10.1093/biostatistics/kxj037",
    "references_bibtex": null,
    "code_url": "https://scanpy.readthedocs.io/en/stable/api/scanpy.pp.combat.html",
    "documentation_url": "https://scanpy.readthedocs.io/en/stable/api/scanpy.pp.combat.html",
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/methods/combat:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/methods/combat",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "methods",
    "method_id": "geneformer",
    "method_name": "Geneformer",
    "method_summary": "Geneformer is a foundation transformer model pretrained on a large-scale corpus of single cell transcriptomes",
    "method_description": "Geneformer is a foundation transformer model pretrained on a large-scale\ncorpus of single cell transcriptomes to enable context-aware predictions in\nnetwork biology. For this task, Geneformer is used to create a batch-corrected\ncell embedding.\n",
    "is_baseline": false,
    "references_doi": ["10.1038/s41586-023-06139-9", "10.1101/2024.08.16.608180"],
    "references_bibtex": null,
    "code_url": "https://huggingface.co/ctheodoris/Geneformer",
    "documentation_url": "https://geneformer.readthedocs.io/en/latest/index.html",
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/methods/geneformer:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/methods/geneformer",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "methods",
    "method_id": "harmony",
    "method_name": "Harmony",
    "method_summary": "Fast, sensitive and accurate integration of single-cell data with Harmony",
    "method_description": "Harmony is a general-purpose R package with an efficient algorithm for integrating multiple data sets. \nIt is especially useful for large single-cell datasets such as single-cell RNA-seq.\n",
    "is_baseline": false,
    "references_doi": "10.1038/s41592-019-0619-0",
    "references_bibtex": null,
    "code_url": "https://github.com/immunogenomics/harmony",
    "documentation_url": "https://portals.broadinstitute.org/harmony",
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/methods/harmony:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/methods/harmony",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "methods",
    "method_id": "harmonypy",
    "method_name": "Harmonypy",
    "method_summary": "harmonypy is a port of the harmony R package by Ilya Korsunsky.",
    "method_description": "Harmony is a general-purpose R package with an efficient algorithm for integrating multiple data sets. \nIt is especially useful for large single-cell datasets such as single-cell RNA-seq.\n",
    "is_baseline": false,
    "references_doi": "10.1038/s41592-019-0619-0",
    "references_bibtex": null,
    "code_url": "https://github.com/slowkow/harmonypy",
    "documentation_url": "https://portals.broadinstitute.org/harmony",
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/methods/harmonypy:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/methods/harmonypy",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "methods",
    "method_id": "liger",
    "method_name": "LIGER",
    "method_summary": "Linked Inference of Genomic Experimental Relationships",
    "method_description": "LIGER or linked inference of genomic experimental relationships uses iNMF \nderiving and implementing a novel coordinate descent algorithm to efficiently \ndo the factorization. Joint clustering is performed and factor loadings are \nnormalised.\n",
    "is_baseline": false,
    "references_doi": "10.1016/j.cell.2019.05.006",
    "references_bibtex": null,
    "code_url": "https://github.com/welch-lab/liger",
    "documentation_url": "https://github.com/welch-lab/liger",
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/methods/liger:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/methods/liger",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "methods",
    "method_id": "mnnpy",
    "method_name": "mnnpy",
    "method_summary": "Batch effect correction by matching mutual nearest neighbors, Python implementation.",
    "method_description": "An implementation of MNN correct in python featuring low memory usage, full multicore support and compatibility with the scanpy framework.\n\nBatch effect correction by matching mutual nearest neighbors (Haghverdi et al, 2018) has been implemented as a function 'mnnCorrect' in the R package scran. Sadly it's extremely slow for big datasets and doesn't make full use of the parallel architecture of modern CPUs.\n\nThis project is a python implementation of the MNN correct algorithm which takes advantage of python's extendability and hackability. It seamlessly integrates with the scanpy framework and has multicore support in its bones.\n",
    "is_baseline": false,
    "references_doi": null,
    "references_bibtex": "@misc{Kang2022,\n  author = {Kang, Chris},\n  title = {mnnpy},\n  year = {Kang2022},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  howpublished = {\\url{https://github.com/chriscainx/mnnpy}},\n  commit = {2097dec30c193f036c5ed7e1c3d1e3a6270e102b}\n}\n",
    "code_url": "https://github.com/chriscainx/mnnpy",
    "documentation_url": "https://github.com/chriscainx/mnnpy#readme",
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/methods/mnnpy:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/methods/mnnpy",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "methods",
    "method_id": "pyliger",
    "method_name": "pyliger",
    "method_summary": "Python implementation of LIGER (Linked Inference of Genomic Experimental Relationships",
    "method_description": "LIGER (installed as rliger) is a package for integrating and analyzing multiple \nsingle-cell datasets, developed by the Macosko lab and maintained/extended by the \nWelch lab. It relies on integrative non-negative matrix factorization to identify \nshared and dataset-specific factors.\n",
    "is_baseline": false,
    "references_doi": "10.1016/j.cell.2019.05.006",
    "references_bibtex": null,
    "code_url": "https://github.com/welch-lab/pyliger",
    "documentation_url": "https://github.com/welch-lab/pyliger",
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/methods/pyliger:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/methods/pyliger",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "methods",
    "method_id": "scalex",
    "method_name": "SCALEX",
    "method_summary": "Online single-cell data integration through projecting heterogeneous datasets into a common cell-embedding space",
    "method_description": "SCALEX is a method for integrating heterogeneous single-cell data online using a VAE framework. Its generalised encoder disentangles batch-related components from batch-invariant biological components, which are then projected into a common cell-embedding space.\n",
    "is_baseline": false,
    "references_doi": "10.1038/s41467-022-33758-z",
    "references_bibtex": null,
    "code_url": "https://github.com/jsxlei/SCALEX",
    "documentation_url": "https://scalex.readthedocs.io",
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/methods/scalex:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/methods/scalex",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "methods",
    "method_id": "scanorama",
    "method_name": "Scanorama",
    "method_summary": "Efficient integration of heterogeneous single-cell transcriptomes using Scanorama",
    "method_description": "Scanorama enables batch-correction and integration of heterogeneous scRNA-seq datasets.\nIt is designed to be used in scRNA-seq pipelines downstream of noise-reduction methods,\nincluding those for imputation and highly-variable gene filtering. The results from\nScanorama integration and batch correction can then be used as input to other tools\nfor scRNA-seq clustering, visualization, and analysis.\n",
    "is_baseline": false,
    "references_doi": "10.1038/s41587-019-0113-3",
    "references_bibtex": null,
    "code_url": "https://github.com/brianhie/scanorama",
    "documentation_url": "https://github.com/brianhie/scanorama#readme",
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/methods/scanorama:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/methods/scanorama",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "methods",
    "method_id": "scanvi",
    "method_name": "scANVI",
    "method_summary": "scANVI is a deep learning method that considers cell type labels.",
    "method_description": "scANVI (single-cell ANnotation using Variational Inference; Python class SCANVI) is a semi-supervised model for single-cell transcriptomics data. In a sense, it can be seen as a scVI extension that can leverage the cell type knowledge for a subset of the cells present in the data sets to infer the states of the rest of the cells.\n",
    "is_baseline": false,
    "references_doi": "10.1038/s41592-018-0229-2",
    "references_bibtex": null,
    "code_url": "https://github.com/scverse/scvi-tools",
    "documentation_url": "https://docs.scvi-tools.org/en/stable/user_guide/models/scanvi.html",
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/methods/scanvi:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/methods/scanvi",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "methods",
    "method_id": "scgpt",
    "method_name": "scGPT",
    "method_summary": "A foundation model for single-cell biology",
    "method_description": "scGPT is a foundation model for single-cell biology based on a generative\npre-trained transformer and trained on a repository of over 33 million cells.\nHere, we use zero-shot output from a pre-trained model to get an integrated\nembedding for the batch integration task.\n",
    "is_baseline": false,
    "references_doi": "10.1038/s41592-024-02201-0",
    "references_bibtex": null,
    "code_url": "https://github.com/bowang-lab/scGPT",
    "documentation_url": "https://scgpt.readthedocs.io/en/latest/",
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/methods/scgpt:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/methods/scgpt",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "methods",
    "method_id": "scimilarity",
    "method_name": "SCimilarity",
    "method_summary": "SCimilarity provides unifying representation of single cell expression profiles",
    "method_description": "SCimilarity is a unifying representation of single cell expression profiles that quantifies similarity between expression states and generalizes to represent new studies without additional training\n",
    "is_baseline": false,
    "references_doi": "10.1101/2023.07.18.549537",
    "references_bibtex": null,
    "code_url": "https://github.com/Genentech/scimilarity",
    "documentation_url": "https://genentech.github.io/scimilarity/index.html",
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/methods/scimilarity:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/methods/scimilarity",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "methods",
    "method_id": "scprint",
    "method_name": "scPRINT",
    "method_summary": "scPRINT is a large transformer model built for the inference of gene networks",
    "method_description": "scPRINT is a large transformer model built for the inference of gene networks\n(connections between genes explaining the cell's expression profile) from\nscRNAseq data.\n\nIt uses novel encoding and decoding of the cell expression profile and new\npre-training methodologies to learn a cell model.\n\nscPRINT can be used to perform the following analyses:\n\n- expression denoising: increase the resolution of your scRNAseq data\n- cell embedding: generate a low-dimensional representation of your dataset\n- label prediction: predict the cell type, disease, sequencer, sex, and\n  ethnicity of your cells\n- gene network inference: generate a gene network from any cell or cell\n  cluster in your scRNAseq dataset\n",
    "is_baseline": false,
    "references_doi": "10.1101/2024.07.29.605556",
    "references_bibtex": null,
    "code_url": "https://github.com/cantinilab/scPRINT",
    "documentation_url": "https://cantinilab.github.io/scPRINT/",
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/methods/scprint:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/methods/scprint",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "methods",
    "method_id": "scvi",
    "method_name": "scVI",
    "method_summary": "scVI combines a variational autoencoder with a hierarchical Bayesian model.",
    "method_description": "scVI combines a variational autoencoder with a hierarchical Bayesian model. It uses the negative binomial distribution to describe gene expression of each cell, conditioned on unobserved factors and the batch variable. ScVI is run as implemented in Luecken et al.\n",
    "is_baseline": false,
    "references_doi": "10.1038/s41592-018-0229-2",
    "references_bibtex": null,
    "code_url": "https://github.com/scverse/scvi-tools",
    "documentation_url": "https://docs.scvi-tools.org/en/stable/user_guide/models/scvi.html",
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/methods/scvi:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/methods/scvi",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  },
  {
    "task_id": "methods",
    "method_id": "uce",
    "method_name": "UCE",
    "method_summary": "UCE offers a unified biological latent space that can represent any cell",
    "method_description": "Universal Cell Embedding (UCE) is a single-cell foundation model that offers a\nunified biological latent space that can represent any cell, regardless of\ntissue or species\n",
    "is_baseline": false,
    "references_doi": "10.1101/2023.11.28.568918",
    "references_bibtex": null,
    "code_url": "https://github.com/snap-stanford/UCE",
    "documentation_url": "https://github.com/snap-stanford/UCE/blob/main/README.md",
    "image": "https://ghcr.io/openproblems-bio/task_batch_integration/methods/uce:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_batch_integration/blob/9b3d1680c4f6714da99f69a6ebe0aa9a25296c98/src/methods/uce",
    "code_version": "build_main",
    "commit_sha": "9b3d1680c4f6714da99f69a6ebe0aa9a25296c98"
  }
]
