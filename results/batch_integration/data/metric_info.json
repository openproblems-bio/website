[
  {
    "metric_id": "ari",
    "metric_name": "ARI",
    "summary": "Adjusted Rand Index compares clustering overlap, correcting for random labels and considering correct overlaps and disagreements.",
    "metric_summary": "The Adjusted Rand Index (ARI) compares the overlap of two clusterings;\nit considers both correct clustering overlaps while also counting correct\ndisagreements between two clusterings.\nWe compared the cell-type labels with the NMI-optimized\nLouvain clustering computed on the integrated dataset.\nThe adjustment of the Rand index corrects for randomly correct labels.\nAn ARI of 0 or 1 corresponds to random labeling or a perfect match,\nrespectively.\n",
    "min": 0,
    "max": 1,
    "maximize": true,
    "v1.path": "openproblems/tasks/_batch_integration/batch_integration_graph/metrics/ari.py",
    "v1.commit": "b3456fd73c04c28516f6df34c57e6e3e8b0dab32",
    "config_path": "/home/runner/work/openproblems-v2/openproblems-v2/src/tasks/batch_integration/metrics/clustering_overlap/config.vsh.yaml",
    "task_id": "batch_integration",
    "component_id": "clustering_overlap",
    "namespace": "batch_integration/metrics",
    "repository_url": null,
    "documentation_url": null,
    "paper_reference": "hubert1985comparing, luecken2022benchmarking"
  },
  {
    "metric_id": "asw_batch",
    "metric_name": "ASW batch",
    "summary": "Average silhouette of batches per cell identity label (cell type)",
    "metric_summary": "We consider the absolute silhouette width, s(i), on\nbatch labels per cell i. Here, 0 indicates that batches are well mixed, and any\ndeviation from 0 indicates a batch effect:\nùë†batch(ùëñ)=|ùë†(ùëñ)|.\n\nTo ensure higher scores indicate better batch mixing, these scores are scaled by\nsubtracting them from 1. As we expect batches to integrate within cell identity\nclusters, we compute the batchASWj score for each cell label j separately,\nusing the equation:\nbatchASWùëó=1|ùê∂ùëó|‚àëùëñ‚ààùê∂ùëó1‚àíùë†batch(ùëñ),\n\nwhere Cj is the set of cells with the cell label j and |Cj| denotes the number of cells\nin that set.\n\nTo obtain the final batchASW score, the label-specific batchASWj scores are averaged:\nbatchASW=1|ùëÄ|‚àëùëó‚ààùëÄbatchASWùëó.\n\nHere, M is the set of unique cell labels.\n",
    "min": 0,
    "max": 1,
    "maximize": true,
    "v1.path": "openproblems/tasks/_batch_integration/batch_integration_embed/metrics/sil_batch.py",
    "v1.commit": "b3456fd73c04c28516f6df34c57e6e3e8b0dab32",
    "config_path": "/home/runner/work/openproblems-v2/openproblems-v2/src/tasks/batch_integration/metrics/asw_batch/config.vsh.yaml",
    "task_id": "batch_integration",
    "component_id": "asw_batch",
    "namespace": "batch_integration/metrics",
    "repository_url": null,
    "documentation_url": null,
    "paper_reference": "luecken2022benchmarking"
  },
  {
    "metric_id": "asw_label",
    "metric_name": "ASW Label",
    "summary": "Average silhouette of cell identity labels (cell types)",
    "metric_summary": "For the bio-conservation score, the ASW was computed on cell identity labels and\nscaled to a value between 0 and 1 using the equation:\ncelltypeASW=(ASW_C+1)/2,\n\nwhere C denotes the set of all cell identity labels.\nFor information about the batch silhouette score, check sil_batch.\n",
    "min": 0,
    "max": 1,
    "maximize": true,
    "v1.path": "openproblems/tasks/_batch_integration/batch_integration_embed/metrics/silhouette.py",
    "v1.commit": "b3456fd73c04c28516f6df34c57e6e3e8b0dab32",
    "config_path": "/home/runner/work/openproblems-v2/openproblems-v2/src/tasks/batch_integration/metrics/asw_label/config.vsh.yaml",
    "task_id": "batch_integration",
    "component_id": "asw_label",
    "namespace": "batch_integration/metrics",
    "repository_url": null,
    "documentation_url": null,
    "paper_reference": "luecken2022benchmarking"
  },
  {
    "metric_id": "cell_cycle_conservation",
    "metric_name": "Cell Cycle Conservation",
    "summary": "Cell cycle conservation score based on principle component regression on cell cycle gene scores",
    "metric_summary": "The cell-cycle conservation score evaluates how well the cell-cycle effect can be\ncaptured before and after integration. We computed cell-cycle scores using Scanpy‚Äôs\nscore_cell_cycle function with a reference gene set from Tirosh et al for the\nrespective cell-cycle phases. We used the same set of cell-cycle genes for mouse and\nhuman data (using capitalization to convert between the gene symbols). We then computed\nthe variance contribution of the resulting S and G2/M phase scores using principal\ncomponent regression (Principal component regression), which was performed for each\nbatch separately. The differences in variance before, Varbefore, and after, Varafter,\nintegration were aggregated into a final score between 0 and 1, using the equation:\nCCconservation=1‚àí|Varafter‚àíVarbefore|/Varbefore.\n\nIn this equation, values close to 0 indicate lower conservation and 1 indicates complete\nconservation of the variance explained by cell cycle. In other words, the variance\nremains unchanged within each batch for complete conservation, while any deviation from\nthe preintegration variance contribution reduces the score.\n",
    "min": 0,
    "max": 1,
    "maximize": true,
    "v1.path": "openproblems/tasks/_batch_integration/batch_integration_embed/metrics/cc_score.py",
    "v1.commit": "b3456fd73c04c28516f6df34c57e6e3e8b0dab32",
    "config_path": "/home/runner/work/openproblems-v2/openproblems-v2/src/tasks/batch_integration/metrics/cell_cycle_conservation/config.vsh.yaml",
    "task_id": "batch_integration",
    "component_id": "cell_cycle_conservation",
    "namespace": "batch_integration/metrics",
    "repository_url": null,
    "documentation_url": null,
    "paper_reference": "luecken2022benchmarking"
  },
  {
    "metric_id": "clisi",
    "metric_name": "cLISI",
    "summary": "Local inverse Simpson's Index",
    "metric_summary": "Local Inverse Simpson's Index metrics adapted from Korsunsky et al. 2019 to run on\nall full feature, embedding and kNN integration outputs via shortest path-based\ndistance computation on single-cell kNN graphs. The metric assesses whether clusters\nof cells in a single-cell RNA-seq dataset are well-mixed across a categorical cell type variable.\n\nThe original LISI score ranges from 0 to the number of categories, with the latter indicating good cell mixing. This is rescaled to a score between 0 and 1.\n",
    "min": 0,
    "max": 1,
    "maximize": true,
    "v1.path": null,
    "v1.commit": null,
    "config_path": "/home/runner/work/openproblems-v2/openproblems-v2/src/tasks/batch_integration/metrics/lisi/config.vsh.yaml",
    "task_id": "batch_integration",
    "component_id": "lisi",
    "namespace": "batch_integration/metrics",
    "repository_url": "https://github.com/theislab/scib/blob/ed3e2846414ca1e3dc07552c0eef1e68d82230d4/scib/metrics/lisi.py",
    "documentation_url": "https://scib.readthedocs.io/en/latest/api/scib.metrics.clisi_graph.html",
    "paper_reference": "luecken2022benchmarking"
  },
  {
    "metric_id": "graph_connectivity",
    "metric_name": "Graph Connectivity",
    "summary": "Connectivity of the subgraph per cell type label",
    "metric_summary": "The graph connectivity metric assesses whether the kNN graph representation,\nG, of the integrated data directly connects all cells with the same cell\nidentity label. For each cell identity label c, we created the subset kNN\ngraph G(Nc;Ec) to contain only cells from a given label. Using these subset\nkNN graphs, we computed the graph connectivity score using the equation:\n\ngc =1/|C| Œ£c‚ààC |LCC(G(Nc;Ec))|/|Nc|.\n\nHere, C represents the set of cell identity labels, |LCC()| is the number\nof nodes in the largest connected component of the graph, and |Nc| is the\nnumber of nodes with cell identity c. The resultant score has a range\nof (0;1], where 1 indicates that all cells with the same cell identity\nare connected in the integrated kNN graph, and the lowest possible score\nindicates a graph where no cell is connected. As this score is computed\non the kNN graph, it can be used to evaluate all integration outputs.\n",
    "min": 0,
    "max": 1,
    "maximize": true,
    "v1.path": "https://github.com/openproblems-bio/openproblems/blob/main/openproblems/tasks/_batch_integration/batch_integration_graph/metrics/graph_connectivity.py",
    "v1.commit": "b3456fd73c04c28516f6df34c57e6e3e8b0dab32",
    "config_path": "/home/runner/work/openproblems-v2/openproblems-v2/src/tasks/batch_integration/metrics/graph_connectivity/config.vsh.yaml",
    "task_id": "batch_integration",
    "component_id": "graph_connectivity",
    "namespace": "batch_integration/metrics",
    "repository_url": null,
    "documentation_url": null,
    "paper_reference": "luecken2022benchmarking"
  },
  {
    "metric_id": "hvg_overlap",
    "metric_name": "HVG overlap",
    "summary": "Overlap of highly variable genes per batch before and after integration.",
    "metric_summary": "The HVG conservation score is a proxy for the preservation of\nthe biological signal. If the data integration method returned\na corrected data matrix, we computed the number of HVGs before\nand after correction for each batch via Scanpy‚Äôs\nhighly_variable_genes function (using the ‚Äòcell ranger‚Äô flavor).\nIf available, we computed 500 HVGs per batch. If fewer than 500\ngenes were present in the integrated object for a batch,\nthe number of HVGs was set to half the total genes in that batch.\nThe overlap coefficient is as follows:\noverlap(ùëã,ùëå)=|ùëã‚à©ùëå|/min(|ùëã|,|ùëå|),\n\nwhere X and Y denote the fraction of preserved informative genes.\nThe overall HVG score is the mean of the per-batch HVG overlap\ncoefficients.\n",
    "min": 0,
    "max": 1,
    "maximize": true,
    "v1.path": "openproblems/tasks/_batch_integration/batch_integration_feature/metrics/hvg_conservation.py",
    "v1.commit": "b3456fd73c04c28516f6df34c57e6e3e8b0dab32",
    "config_path": "/home/runner/work/openproblems-v2/openproblems-v2/src/tasks/batch_integration/metrics/hvg_overlap/config.vsh.yaml",
    "task_id": "batch_integration",
    "component_id": "hvg_overlap",
    "namespace": "batch_integration/metrics",
    "repository_url": null,
    "documentation_url": null,
    "paper_reference": "luecken2022benchmarking"
  },
  {
    "metric_id": "ilisi",
    "metric_name": "iLISI",
    "summary": "Local inverse Simpson's Index",
    "metric_summary": "Local Inverse Simpson's Index metrics adapted from Korsunsky et al. 2019 to run on\nall full feature, embedding and kNN integration outputs via shortest path-based\ndistance computation on single-cell kNN graphs. The metric assesses whether clusters\nof cells in a single-cell RNA-seq dataset are well-mixed across a categorical batch\nvariable.\n\nThe original LISI score ranges from 0 to the number of categories, with the latter\nindicating good cell mixing. This is rescaled to a score between 0 and 1.\n",
    "min": 0,
    "max": 1,
    "maximize": true,
    "v1.path": null,
    "v1.commit": null,
    "config_path": "/home/runner/work/openproblems-v2/openproblems-v2/src/tasks/batch_integration/metrics/lisi/config.vsh.yaml",
    "task_id": "batch_integration",
    "component_id": "lisi",
    "namespace": "batch_integration/metrics",
    "repository_url": "https://github.com/theislab/scib/blob/ed3e2846414ca1e3dc07552c0eef1e68d82230d4/scib/metrics/lisi.py",
    "documentation_url": "https://scib.readthedocs.io/en/latest/api/scib.metrics.ilisi_graph.html",
    "paper_reference": "luecken2022benchmarking"
  },
  {
    "metric_id": "isolated_label_asw",
    "metric_name": "Isolated label ASW",
    "summary": "Evaluate how well isolated labels separate by average silhouette width",
    "metric_summary": "Isolated cell labels are defined as the labels present in the least number\nof batches in the integration task. The score evaluates how well these isolated labels\nseparate from other cell identities.\n\nThe isolated label ASW score is obtained by computing the\nASW of isolated versus non-isolated labels on the PCA embedding (ASW metric above) and\nscaling this score to be between 0 and 1. The final score for each metric version\nconsists of the mean isolated score of all isolated labels.\n",
    "min": 0,
    "max": 1,
    "maximize": true,
    "v1.path": "openproblems/tasks/_batch_integration/batch_integration_graph/metrics/iso_label_sil.py",
    "v1.commit": "b3456fd73c04c28516f6df34c57e6e3e8b0dab32",
    "config_path": "/home/runner/work/openproblems-v2/openproblems-v2/src/tasks/batch_integration/metrics/isolated_label_asw/config.vsh.yaml",
    "task_id": "batch_integration",
    "component_id": "isolated_label_asw",
    "namespace": "batch_integration/metrics",
    "repository_url": null,
    "documentation_url": null,
    "paper_reference": "luecken2022benchmarking"
  },
  {
    "metric_id": "isolated_label_f1",
    "metric_name": "Isolated label F1 score",
    "summary": "Evaluate how well isolated labels coincide with clusters",
    "metric_summary": "We developed two isolated label scores to evaluate how well the data integration methods\ndealt with cell identity labels shared by few batches. Specifically, we identified\nisolated cell labels as the labels present in the least number of batches in the\nintegration task.\nThe score evaluates how well these isolated labels separate from other cell identities.\nWe implemented the isolated label metric in two versions:\n(1) the best clustering of the isolated label (F1 score) and\n(2) the global ASW of the isolated label. For the cluster-based score,\nwe first optimize the cluster assignment of the isolated label using the F1 scoreÀö\nacross louvain clustering resolutions ranging from 0.1 to 2 in resolution steps of 0.1.\nThe optimal F1 score for the isolated label is then used as the metric score.\nThe F1 score is a weighted mean of precision and recall given by the equation:\nùêπ1=2√ó(precision√órecall)/(precision+recall).\n\nIt returns a value between 0 and 1,\nwhere 1 shows that all of the isolated label cells and no others are captured in\nthe cluster. For the isolated label ASW score, we compute the ASW of isolated\nversus nonisolated labels on the PCA embedding (ASW metric above) and scale this\nscore to be between 0 and 1. The final score for each metric version consists of\nthe mean isolated score of all isolated labels.\n",
    "min": 0,
    "max": 1,
    "maximize": true,
    "v1.path": "openproblems/tasks/_batch_integration/batch_integration_graph/metrics/iso_label_f1.py",
    "v1.commit": "b3456fd73c04c28516f6df34c57e6e3e8b0dab32",
    "config_path": "/home/runner/work/openproblems-v2/openproblems-v2/src/tasks/batch_integration/metrics/isolated_label_f1/config.vsh.yaml",
    "task_id": "batch_integration",
    "component_id": "isolated_label_f1",
    "namespace": "batch_integration/metrics",
    "repository_url": null,
    "documentation_url": null,
    "paper_reference": "luecken2022benchmarking"
  },
  {
    "metric_id": "kbet",
    "metric_name": "kBET",
    "summary": "kBET algorithm to determine how well batches are mixed within a cell type",
    "metric_summary": "The kBET algorithm (v.0.99.6, release 4c9dafa) determines whether the label composition\nof a k nearest neighborhood of a cell is similar to the expected (global) label\ncomposition (Buettner et al., Nat Meth 2019). The test is repeated for a random subset\nof cells, and the results are summarized as a rejection rate over all tested\nneighborhoods. Thus, kBET works on a kNN graph.\n\nWe compute kNN graphs where k‚Äâ=‚Äâ50 for joint embeddings and corrected feature outputs\nvia Scanpy preprocessing steps. To test for technical effects and to account for\ncell-type frequency shifts across datasets, we applied kBET\nseparately on the batch variable for each cell identity label. Using the kBET defaults,\na k equal to the median of the number of cells per batch within each label is used for\nthis computation. Additionally, we set the minimum and maximum thresholds of k to 10 and\n100, respectively. As kNN graphs that have been subset by cell identity labels may no\nlonger be connected, we compute kBET per connected component. If >25% of cells were\nassigned to connected components too small for kBET computation (smaller than k‚Äâ√ó‚Äâ3),\nwe assigned a kBET score of 1 to denote poor batch removal. Subsequently, kBET scores\nfor each label were averaged and subtracted from 1 to give a final kBET score.\n\nIn Open Problems we do not run kBET on graph outputs to avoid computation-intensive\ndiffusion processes being run.\n",
    "min": 0,
    "max": 1,
    "maximize": true,
    "v1.path": "openproblems/tasks/_batch_integration/batch_integration_embed/metrics/kBET.py",
    "v1.commit": "b3456fd73c04c28516f6df34c57e6e3e8b0dab32",
    "config_path": "/home/runner/work/openproblems-v2/openproblems-v2/src/tasks/batch_integration/metrics/kbet/config.vsh.yaml",
    "task_id": "batch_integration",
    "component_id": "kbet",
    "namespace": "batch_integration/metrics",
    "repository_url": null,
    "documentation_url": null,
    "paper_reference": "luecken2022benchmarking"
  },
  {
    "metric_id": "nmi",
    "metric_name": "NMI",
    "summary": "NMI compares overlap by scaling using mean entropy terms and optimizing Louvain clustering to obtain the best match between clusters and labels.",
    "metric_summary": "Normalized Mutual Information (NMI) compares the overlap of two clusterings.\nWe used NMI to compare the cell-type labels with Louvain clusters computed on\nthe integrated dataset. The overlap was scaled using the mean of the entropy terms\nfor cell-type and cluster labels. Thus, NMI scores of 0 or 1 correspond to uncorrelated\nclustering or a perfect match, respectively. We performed optimized Louvain clustering\nfor this metric to obtain the best match between clusters and labels.\n",
    "min": 0,
    "max": 1,
    "maximize": true,
    "v1.path": "openproblems/tasks/_batch_integration/batch_integration_graph/metrics/nmi.py",
    "v1.commit": "b3456fd73c04c28516f6df34c57e6e3e8b0dab32",
    "config_path": "/home/runner/work/openproblems-v2/openproblems-v2/src/tasks/batch_integration/metrics/clustering_overlap/config.vsh.yaml",
    "task_id": "batch_integration",
    "component_id": "clustering_overlap",
    "namespace": "batch_integration/metrics",
    "repository_url": null,
    "documentation_url": null,
    "paper_reference": "amelio2015normalized, luecken2022benchmarking"
  },
  {
    "metric_id": "pcr",
    "metric_name": "PCR",
    "summary": "Compare explained variance by batch before and after integration",
    "metric_summary": "Principal component regression, derived from PCA, has previously been used to quantify\nbatch removal. Briefly, the R2 was calculated from a linear regression of the\ncovariate of interest (for example, the batch variable B) onto each principal component.\nThe variance contribution of the batch effect per principal component was then\ncalculated as the product of the variance explained by the ith principal component (PC)\nand the corresponding R2(PCi|B). The sum across all variance contributions by the batch\neffects in all principal components gives the total variance explained by the batch\nvariable as follows:\nVar(ùê∂|ùêµ)=‚àëùëñ=1ùê∫Var(ùê∂|PCùëñ)√óùëÖ2(PCùëñ|ùêµ),\n\nwhere Var(C|PCi) is the variance of the data matrix C explained by the ith principal\ncomponent.\n",
    "min": 0,
    "max": 1,
    "maximize": true,
    "v1.path": "openproblems/tasks/_batch_integration/batch_integration_embed/metrics/pcr.py",
    "v1.commit": "b3456fd73c04c28516f6df34c57e6e3e8b0dab32",
    "config_path": "/home/runner/work/openproblems-v2/openproblems-v2/src/tasks/batch_integration/metrics/pcr/config.vsh.yaml",
    "task_id": "batch_integration",
    "component_id": "pcr",
    "namespace": "batch_integration/metrics",
    "repository_url": null,
    "documentation_url": null,
    "paper_reference": "luecken2022benchmarking"
  }
]
