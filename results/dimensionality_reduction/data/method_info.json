[
  {
    "task_id": "control_methods",
    "method_id": "random_features",
    "method_name": "Random Features",
    "method_summary": "Negative control by randomly embedding into a 2D space.",
    "method_description": "This method serves as a negative control, where the data is randomly embedded into a two-dimensional space, with no attempt to preserve the original structure.",
    "is_baseline": true,
    "references_doi": null,
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_dimensionality_reduction",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_dimensionality_reduction/control_methods/random_features:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_dimensionality_reduction/blob/7adb5a856f2374eda43ee7f133b183e65081635a/src/control_methods/random_features",
    "code_version": "build_main",
    "commit_sha": "7adb5a856f2374eda43ee7f133b183e65081635a"
  },
  {
    "task_id": "control_methods",
    "method_id": "spectral_features",
    "method_name": "Spectral Features",
    "method_summary": "Positive control by Use 1000-dimensional diffusions maps as an embedding.",
    "method_description": "This serves as a positive control since it uses 1000-dimensional diffusions maps as an embedding",
    "is_baseline": true,
    "references_doi": null,
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_dimensionality_reduction",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_dimensionality_reduction/control_methods/spectral_features:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_dimensionality_reduction/blob/7adb5a856f2374eda43ee7f133b183e65081635a/src/control_methods/spectral_features",
    "code_version": "build_main",
    "commit_sha": "7adb5a856f2374eda43ee7f133b183e65081635a"
  },
  {
    "task_id": "control_methods",
    "method_id": "true_features",
    "method_name": "True Features",
    "method_summary": "Positive control by retaining the dimensionality without loss of information.",
    "method_description": "This serves as a positive control since the original high-dimensional data is retained as is, without any loss of information",
    "is_baseline": true,
    "references_doi": null,
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_dimensionality_reduction",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_dimensionality_reduction/control_methods/true_features:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_dimensionality_reduction/blob/7adb5a856f2374eda43ee7f133b183e65081635a/src/control_methods/true_features",
    "code_version": "build_main",
    "commit_sha": "7adb5a856f2374eda43ee7f133b183e65081635a"
  },
  {
    "task_id": "methods",
    "method_id": "densmap",
    "method_name": "densMAP",
    "method_summary": "Modified UMAP with preservation of local density information",
    "method_description": "A modification of UMAP that adds an extra cost term in order to preserve information about the relative local density of the data. It is performed on the same inputs as UMAP.",
    "is_baseline": false,
    "references_doi": "10.1038/s41587-020-00801-7",
    "references_bibtex": null,
    "code_url": "https://github.com/lmcinnes/umap",
    "documentation_url": "https://umap-learn.readthedocs.io/en/latest/densmap_demo.html",
    "image": "https://ghcr.io/openproblems-bio/task_dimensionality_reduction/methods/densmap:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_dimensionality_reduction/blob/7adb5a856f2374eda43ee7f133b183e65081635a/src/methods/densmap",
    "code_version": "build_main",
    "commit_sha": "7adb5a856f2374eda43ee7f133b183e65081635a"
  },
  {
    "task_id": "methods",
    "method_id": "diffusion_map",
    "method_name": "Diffusion Map",
    "method_summary": "Finding meaningful geometric descriptions of datasets using diffusion maps.",
    "method_description": "Implements diffusion map method of data parametrization, including creation and visualization of diffusion map, clustering with diffusion K-means and regression using adaptive regression model.",
    "is_baseline": false,
    "references_doi": "10.1016/j.acha.2006.04.006",
    "references_bibtex": null,
    "code_url": "https://github.com/theislab/destiny",
    "documentation_url": "https://bioconductor.org/packages/release/bioc/html/destiny.html",
    "image": "https://ghcr.io/openproblems-bio/task_dimensionality_reduction/methods/diffusion_map:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_dimensionality_reduction/blob/7adb5a856f2374eda43ee7f133b183e65081635a/src/methods/diffusion_map",
    "code_version": "build_main",
    "commit_sha": "7adb5a856f2374eda43ee7f133b183e65081635a"
  },
  {
    "task_id": "methods",
    "method_id": "ivis",
    "method_name": "ivis",
    "method_summary": "Structure-preserving dimensionality reduction using a siamese neural network trained on triplets.",
    "method_description": "ivis is a machine learning library for reducing dimensionality of very large\ndatasets using Siamese Neural Networks. ivis preserves global data\nstructures in a low-dimensional space, adds new data points to existing\nembeddings using a parametric mapping function, and scales linearly to\nmillions of observations.\n",
    "is_baseline": false,
    "references_doi": "10.1038/s41598-019-45301-0",
    "references_bibtex": null,
    "code_url": "https://github.com/beringresearch/ivis",
    "documentation_url": "https://beringresearch.github.io/ivis/",
    "image": "https://ghcr.io/openproblems-bio/task_dimensionality_reduction/methods/ivis:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_dimensionality_reduction/blob/7adb5a856f2374eda43ee7f133b183e65081635a/src/methods/ivis",
    "code_version": "build_main",
    "commit_sha": "7adb5a856f2374eda43ee7f133b183e65081635a"
  },
  {
    "task_id": "methods",
    "method_id": "lmds",
    "method_name": "LMDS",
    "method_summary": "Landmark Multi-Dimensional Scaling",
    "method_description": "Landmark Multi-Dimensional Scaling (LMDS) is a non-linear method for\ndimensionality reduction that is based on the concept of multi-dimensional\nscaling.\n",
    "is_baseline": false,
    "references_doi": "10.1038/s41587-019-0071-9",
    "references_bibtex": null,
    "code_url": "https://github.com/dynverse/lmds",
    "documentation_url": "https://dynverse.org/lmds/",
    "image": "https://ghcr.io/openproblems-bio/task_dimensionality_reduction/methods/lmds:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_dimensionality_reduction/blob/7adb5a856f2374eda43ee7f133b183e65081635a/src/methods/lmds",
    "code_version": "build_main",
    "commit_sha": "7adb5a856f2374eda43ee7f133b183e65081635a"
  },
  {
    "task_id": "methods",
    "method_id": "neuralee",
    "method_name": "NeuralEE",
    "method_summary": "Non-linear method that uses a neural network to preserve pairwise distances between data points in a high-dimensional space.",
    "method_description": "A neural network implementation of elastic embedding. It is a\nnon-linear method that preserves pairwise distances between data points.\nNeuralEE uses a neural network to optimize an objective function that\nmeasures the difference between pairwise distances in the original\nhigh-dimensional space and the two-dimensional space. It is computed on both\nthe recommended input from the package authors of 500 HVGs selected from a\nlogged expression matrix (without sequencing depth scaling) and the default\nlogCPM matrix with 1000 HVGs.\n",
    "is_baseline": false,
    "references_doi": "10.3389/fgene.2020.00786",
    "references_bibtex": null,
    "code_url": "https://github.com/HiBearME/NeuralEE",
    "documentation_url": "https://github.com/HiBearME/NeuralEE#readme",
    "image": "https://ghcr.io/openproblems-bio/task_dimensionality_reduction/methods/neuralee:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_dimensionality_reduction/blob/7adb5a856f2374eda43ee7f133b183e65081635a/src/methods/neuralee",
    "code_version": "build_main",
    "commit_sha": "7adb5a856f2374eda43ee7f133b183e65081635a"
  },
  {
    "task_id": "methods",
    "method_id": "pca",
    "method_name": "PCA",
    "method_summary": "A linear method that finds orthogonal directions to compute the two-dimensional embedding.",
    "method_description": "Principal Component Analysis is a linear method that finds orthogonal\ndirections in the data that capture the most variance. The first two\nprincipal components are chosen as the two-dimensional embedding. We select\nonly the first two principal components as the two-dimensional embedding. PCA\nis calculated on the logCPM expression matrix with and without selecting 1000\nHVGs.\n",
    "is_baseline": false,
    "references_doi": "10.1080/14786440109462720",
    "references_bibtex": null,
    "code_url": "https://github.com/scverse/scanpy",
    "documentation_url": "https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.pca.html",
    "image": "https://ghcr.io/openproblems-bio/task_dimensionality_reduction/methods/pca:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_dimensionality_reduction/blob/7adb5a856f2374eda43ee7f133b183e65081635a/src/methods/pca",
    "code_version": "build_main",
    "commit_sha": "7adb5a856f2374eda43ee7f133b183e65081635a"
  },
  {
    "task_id": "methods",
    "method_id": "phate",
    "method_name": "PHATE",
    "method_summary": "Preservating trajectories in a dataset by using heat diffusion potential.",
    "method_description": "PHATE or \"Potential of Heat - diffusion for Affinity - based Transition\nEmbedding\" uses the potential of heat diffusion to preserve trajectories in\na dataset via a diffusion process. It is an affinity - based method that\ncreates an embedding by finding the dominant eigenvalues of a Markov\ntransition matrix. We evaluate several variants including using the\nrecommended square - root transformed CPM matrix as input, this input with\nthe gamma parameter set to zero and the normal logCPM transformed matrix\nwith and without HVG selection.\n",
    "is_baseline": false,
    "references_doi": "10.1038/s41587-019-0336-3",
    "references_bibtex": null,
    "code_url": "https://github.com/KrishnaswamyLab/PHATE",
    "documentation_url": "https://phate.readthedocs.io/en/stable/",
    "image": "https://ghcr.io/openproblems-bio/task_dimensionality_reduction/methods/phate:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_dimensionality_reduction/blob/7adb5a856f2374eda43ee7f133b183e65081635a/src/methods/phate",
    "code_version": "build_main",
    "commit_sha": "7adb5a856f2374eda43ee7f133b183e65081635a"
  },
  {
    "task_id": "methods",
    "method_id": "pymde",
    "method_name": "PyMDE",
    "method_summary": "A Python implementation of Minimum-Distortion Embedding",
    "method_description": "PyMDE is a Python implementation of Minimum-Distortion Embedding. It is a\nnon-linear method that preserves distances between cells or neighbourhoods\nin the original space.\n",
    "is_baseline": false,
    "references_doi": "10.1561/2200000090",
    "references_bibtex": null,
    "code_url": "https://github.com/cvxgrp/pymde",
    "documentation_url": "https://pymde.org",
    "image": "https://ghcr.io/openproblems-bio/task_dimensionality_reduction/methods/pymde:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_dimensionality_reduction/blob/7adb5a856f2374eda43ee7f133b183e65081635a/src/methods/pymde",
    "code_version": "build_main",
    "commit_sha": "7adb5a856f2374eda43ee7f133b183e65081635a"
  },
  {
    "task_id": "methods",
    "method_id": "simlr",
    "method_name": "SIMLR",
    "method_summary": "Multikernel-based learning of distance metrics from gene expression data for dimension reduction, clustering and visulaization.",
    "method_description": "Single-cell Interpretation via Multikernel LeaRning (SIMLR) learns\ncell-to-cell similarity measures from single-cell RNA-seq data in using\nGaussian kernels with various hyperparameters in order to perform dimension\nreduction, clustering and visualization. SIMLR assumes that if C separable\npopulations exist among the N cells, then the similarity matrix should have\nan approximate block-diagonal structure with C blocks whereby cells have\nlarger similarities to other cells within the same subpopulations. Learned\nsimilarity between two cells should be small if the Euclidean distance\nbetween them is large. The cell-to-cell similarity is computed using an\noptimization framework over an N x N similarity matrix, a low-dimensional\nauxilary matrix enforcing low rank constraint on the similarity matrix, and\nthe kernel weights. Dimension reduction is achieved by the stochastic\nneighbor embedding methodology with the learned similarities as input.\n",
    "is_baseline": false,
    "references_doi": "10.1038/nmeth.4207",
    "references_bibtex": null,
    "code_url": "https://github.com/BatzoglouLabSU/SIMLR",
    "documentation_url": "https://bioconductor.org/packages/SIMLR/",
    "image": "https://ghcr.io/openproblems-bio/task_dimensionality_reduction/methods/simlr:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_dimensionality_reduction/blob/7adb5a856f2374eda43ee7f133b183e65081635a/src/methods/simlr",
    "code_version": "build_main",
    "commit_sha": "7adb5a856f2374eda43ee7f133b183e65081635a"
  },
  {
    "task_id": "methods",
    "method_id": "tsne",
    "method_name": "t-SNE",
    "method_summary": "Minimizing Kullback-Leibler divergence by converting similarities into joint probabilities between data points and the low/high dimensional embedding.",
    "method_description": "t-distributed Stochastic Neighbor Embedding converts similarities between\ndata points to joint probabilities and tries to minimize the\nKullback-Leibler divergence between the joint probabilities of the\nlow-dimensional embedding and the high-dimensional data. We use the\nimplementation in the scanpy package with the MulticoreTSNE backend taking\nthe result of PCA on the logCPM expression matrix (with and without HVG\nselection) as input.\n",
    "is_baseline": false,
    "references_doi": null,
    "references_bibtex": "@article{JMLR:v9:vandermaaten08a,\n  author  = {Laurens van der Maaten and Geoffrey Hinton},\n  title   = {Visualizing Data using t-SNE},\n  journal = {Journal of Machine Learning Research},\n  year    = {2008},\n  volume  = {9},\n  number  = {86},\n  pages   = {2579--2605},\n  url     = {http://jmlr.org/papers/v9/vandermaaten08a.html}\n}\n",
    "code_url": "https://github.com/scverse/scanpy",
    "documentation_url": "https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.tsne.html",
    "image": "https://ghcr.io/openproblems-bio/task_dimensionality_reduction/methods/tsne:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_dimensionality_reduction/blob/7adb5a856f2374eda43ee7f133b183e65081635a/src/methods/tsne",
    "code_version": "build_main",
    "commit_sha": "7adb5a856f2374eda43ee7f133b183e65081635a"
  },
  {
    "task_id": "methods",
    "method_id": "umap",
    "method_name": "UMAP",
    "method_summary": "A manifold learning algorithm that utilizes topological data analysis for dimension reduction.",
    "method_description": "Uniform Manifold Approximation and Projection is an algorithm for\ndimension reduction based on manifold learning techniques and ideas from\ntopological data analysis. We perform UMAP on the logCPM expression matrix\nbefore and after HVG selection and with and without PCA as a pre-processing\nstep.\n",
    "is_baseline": false,
    "references_doi": "10.48550/arxiv.1802.03426",
    "references_bibtex": null,
    "code_url": "https://github.com/lmcinnes/umap",
    "documentation_url": "https://umap-learn.readthedocs.io/en/latest/",
    "image": "https://ghcr.io/openproblems-bio/task_dimensionality_reduction/methods/umap:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_dimensionality_reduction/blob/7adb5a856f2374eda43ee7f133b183e65081635a/src/methods/umap",
    "code_version": "build_main",
    "commit_sha": "7adb5a856f2374eda43ee7f133b183e65081635a"
  }
]
