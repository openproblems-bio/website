[
  {
    "task_id": "control_methods",
    "method_id": "no_denoising",
    "method_name": "No Denoising",
    "method_summary": "negative control by copying train counts",
    "method_description": "This method serves as a negative control, where the denoised data is a copy of the unaltered training data. This represents the scoring threshold if denoising was not performed on the data.",
    "is_baseline": true,
    "references_doi": null,
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_denoising",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_denoising/control_methods/no_denoising:1.0.0",
    "implementation_url": "https://github.com/openproblems-bio/task_denoising/blob/252731bc7276eb8a6a3398dc4bea026ae70eca80/src/control_methods/no_denoising",
    "code_version": "1.0.0",
    "commit_sha": "252731bc7276eb8a6a3398dc4bea026ae70eca80"
  },
  {
    "task_id": "control_methods",
    "method_id": "perfect_denoising",
    "method_name": "Perfect Denoising",
    "method_summary": "Positive control by copying the test counts",
    "method_description": "This method serves as a positive control, where the test data is copied 1-to-1 to the denoised data. This makes it seem as if the data is perfectly denoised as it will be compared to the test data in the metrics.",
    "is_baseline": true,
    "references_doi": null,
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_denoising",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_denoising/control_methods/perfect_denoising:1.0.0",
    "implementation_url": "https://github.com/openproblems-bio/task_denoising/blob/252731bc7276eb8a6a3398dc4bea026ae70eca80/src/control_methods/perfect_denoising",
    "code_version": "1.0.0",
    "commit_sha": "252731bc7276eb8a6a3398dc4bea026ae70eca80"
  },
  {
    "task_id": "methods",
    "method_id": "alra",
    "method_name": "ALRA",
    "method_summary": "ALRA imputes missing values in scRNA-seq data by computing rank-k approximation, thresholding by gene, and rescaling the matrix.",
    "method_description": "Adaptively-thresholded Low Rank Approximation (ALRA). \n\nALRA is a method for imputation of missing values in single cell RNA-sequencing data, \ndescribed in the preprint, \"Zero-preserving imputation of scRNA-seq data using low-rank approximation\" \navailable [here](https://www.biorxiv.org/content/early/2018/08/22/397588). Given a \nscRNA-seq expression matrix, ALRA first computes its rank-k approximation using randomized SVD. \nNext, each row (gene) is thresholded by the magnitude of the most negative value of that gene. \nFinally, the matrix is rescaled.\n",
    "is_baseline": false,
    "references_doi": "10.1101/397588",
    "references_bibtex": null,
    "code_url": "https://github.com/KlugerLab/ALRA",
    "documentation_url": "https://github.com/KlugerLab/ALRA/blob/master/README.md",
    "image": "https://ghcr.io/openproblems-bio/task_denoising/methods/alra:1.0.0",
    "implementation_url": "https://github.com/openproblems-bio/task_denoising/blob/252731bc7276eb8a6a3398dc4bea026ae70eca80/src/methods/alra",
    "code_version": "1.0.0",
    "commit_sha": "252731bc7276eb8a6a3398dc4bea026ae70eca80"
  },
  {
    "task_id": "methods",
    "method_id": "dca",
    "method_name": "DCA",
    "method_summary": "A deep autoencoder with ZINB loss function to address the dropout effect in count data",
    "method_description": "\"Deep Count Autoencoder\n\nRemoves the dropout effect by taking the count structure, overdispersed nature and sparsity of the data into account \nusing a deep autoencoder with zero-inflated negative binomial (ZINB) loss function.\"\n",
    "is_baseline": false,
    "references_doi": "10.1038/s41467-018-07931-2",
    "references_bibtex": null,
    "code_url": "https://github.com/theislab/dca",
    "documentation_url": "https://github.com/theislab/dca#readme",
    "image": "https://ghcr.io/openproblems-bio/task_denoising/methods/dca:1.0.0",
    "implementation_url": "https://github.com/openproblems-bio/task_denoising/blob/252731bc7276eb8a6a3398dc4bea026ae70eca80/src/methods/dca",
    "code_version": "1.0.0",
    "commit_sha": "252731bc7276eb8a6a3398dc4bea026ae70eca80"
  },
  {
    "task_id": "methods",
    "method_id": "knn_smoothing",
    "method_name": "KNN Smoothing",
    "method_summary": "Iterative kNN-smoothing denoises scRNA-seq data by iteratively increasing the size of neighbourhoods for smoothing until a maximum k value is reached.",
    "method_description": "Iterative kNN-smoothing is a method to repair or denoise noisy scRNA-seq expression matrices. Given a scRNA-seq expression matrix, KNN-smoothing first applies initial normalisation and smoothing. Then, a chosen number of principal components is used to calculate Euclidean distances between cells. Minimally sized neighbourhoods are initially determined from these Euclidean distances, and expression profiles are shared between neighbouring cells. Then, the resultant smoothed matrix is used as input to the next step of smoothing, where the size (k) of the considered neighbourhoods is increased, leading to greater smoothing. This process continues until a chosen maximum k value has been reached, at which point the iteratively smoothed object is then optionally scaled to yield a final result.",
    "is_baseline": false,
    "references_doi": "10.1101/217737",
    "references_bibtex": null,
    "code_url": "https://github.com/yanailab/knn-smoothing",
    "documentation_url": "https://github.com/yanailab/knn-smoothing#readme",
    "image": "https://ghcr.io/openproblems-bio/task_denoising/methods/knn_smoothing:1.0.0",
    "implementation_url": "https://github.com/openproblems-bio/task_denoising/blob/252731bc7276eb8a6a3398dc4bea026ae70eca80/src/methods/knn_smoothing",
    "code_version": "1.0.0",
    "commit_sha": "252731bc7276eb8a6a3398dc4bea026ae70eca80"
  },
  {
    "task_id": "methods",
    "method_id": "magic",
    "method_name": "MAGIC",
    "method_summary": "MAGIC imputes and denoises scRNA-seq data that is noisy or dropout-prone.",
    "method_description": "MAGIC (Markov Affinity-based Graph Imputation of Cells) is a method for imputation and denoising of noisy or dropout-prone single cell RNA-sequencing data. Given a normalised scRNA-seq expression matrix, it first calculates Euclidean distances between each pair of cells in the dataset, which is then augmented using a Gaussian kernel (function) and row-normalised to give a normalised affinity matrix. A t-step markov process is then calculated, by powering this affinity matrix t times. Finally, the powered affinity matrix is right-multiplied by the normalised data, causing the final imputed values to take the value of a per-gene average weighted by the affinities of cells. The resultant imputed matrix is then rescaled, to more closely match the magnitude of measurements in the normalised (input) matrix.",
    "is_baseline": false,
    "references_doi": "10.1016/j.cell.2018.05.061",
    "references_bibtex": null,
    "code_url": "https://github.com/KrishnaswamyLab/MAGIC",
    "documentation_url": "https://github.com/KrishnaswamyLab/MAGIC#readme",
    "image": "https://ghcr.io/openproblems-bio/task_denoising/methods/magic:1.0.0",
    "implementation_url": "https://github.com/openproblems-bio/task_denoising/blob/252731bc7276eb8a6a3398dc4bea026ae70eca80/src/methods/magic",
    "code_version": "1.0.0",
    "commit_sha": "252731bc7276eb8a6a3398dc4bea026ae70eca80"
  },
  {
    "task_id": "methods",
    "method_id": "scprint",
    "method_name": "scPRINT",
    "method_summary": "scPRINT is a large transformer model built for the inference of gene networks",
    "method_description": "scPRINT is a large transformer model built for the inference of gene networks\n(connections between genes explaining the cell's expression profile) from\nscRNAseq data.\n\nIt uses novel encoding and decoding of the cell expression profile and new\npre-training methodologies to learn a cell model.\n\nscPRINT can be used to perform the following analyses:\n\n- expression denoising: increase the resolution of your scRNAseq data\n- cell embedding: generate a low-dimensional representation of your dataset\n- label prediction: predict the cell type, disease, sequencer, sex, and\n  ethnicity of your cells\n- gene network inference: generate a gene network from any cell or cell\n  cluster in your scRNAseq dataset\n",
    "is_baseline": false,
    "references_doi": "10.1101/2024.07.29.605556",
    "references_bibtex": null,
    "code_url": "https://github.com/cantinilab/scPRINT",
    "documentation_url": "https://cantinilab.github.io/scPRINT/",
    "image": "https://ghcr.io/openproblems-bio/task_denoising/methods/scprint:1.0.0",
    "implementation_url": "https://github.com/openproblems-bio/task_denoising/blob/252731bc7276eb8a6a3398dc4bea026ae70eca80/src/methods/scprint",
    "code_version": "1.0.0",
    "commit_sha": "252731bc7276eb8a6a3398dc4bea026ae70eca80"
  }
]
