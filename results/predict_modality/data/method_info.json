[
  {
    "task_id": "control_methods",
    "method_id": "mean_per_gene",
    "method_name": "Mean per gene",
    "method_summary": "Returns the mean expression value per gene.",
    "method_description": "Returns the mean expression value per gene.",
    "is_baseline": true,
    "references_doi": null,
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_predict_modality",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_predict_modality/control_methods/mean_per_gene:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_predict_modality/blob/b333268bf19de5c7b9003f69a864bda48ae827a1/src/control_methods/mean_per_gene",
    "code_version": "build_main",
    "commit_sha": "b333268bf19de5c7b9003f69a864bda48ae827a1"
  },
  {
    "task_id": "control_methods",
    "method_id": "random_predict",
    "method_name": "Random predictions",
    "method_summary": "Returns random training profiles.",
    "method_description": "Returns random training profiles.",
    "is_baseline": true,
    "references_doi": null,
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_predict_modality",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_predict_modality/control_methods/random_predict:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_predict_modality/blob/b333268bf19de5c7b9003f69a864bda48ae827a1/src/control_methods/random_predict",
    "code_version": "build_main",
    "commit_sha": "b333268bf19de5c7b9003f69a864bda48ae827a1"
  },
  {
    "task_id": "control_methods",
    "method_id": "zeros",
    "method_name": "Zeros",
    "method_summary": "Returns a prediction consisting of all zeros.",
    "method_description": "Returns a prediction consisting of all zeros.",
    "is_baseline": true,
    "references_doi": null,
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_predict_modality",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_predict_modality/control_methods/zeros:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_predict_modality/blob/b333268bf19de5c7b9003f69a864bda48ae827a1/src/control_methods/zeros",
    "code_version": "build_main",
    "commit_sha": "b333268bf19de5c7b9003f69a864bda48ae827a1"
  },
  {
    "task_id": "control_methods",
    "method_id": "solution",
    "method_name": "Solution",
    "method_summary": "Returns the ground-truth solution.",
    "method_description": "Returns the ground-truth solution.",
    "is_baseline": true,
    "references_doi": null,
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_predict_modality",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_predict_modality/control_methods/solution:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_predict_modality/blob/b333268bf19de5c7b9003f69a864bda48ae827a1/src/control_methods/solution",
    "code_version": "build_main",
    "commit_sha": "b333268bf19de5c7b9003f69a864bda48ae827a1"
  },
  {
    "task_id": "methods",
    "method_id": "knnr_py",
    "method_name": "KNNR (Py)",
    "method_summary": "K-nearest neighbor regression in Python.",
    "method_description": "K-nearest neighbor regression in Python.",
    "is_baseline": false,
    "references_doi": "10.2307/1403797",
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_predict_modality",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_predict_modality/methods/knnr_py:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_predict_modality/blob/b333268bf19de5c7b9003f69a864bda48ae827a1/src/methods/knnr_py",
    "code_version": "build_main",
    "commit_sha": "b333268bf19de5c7b9003f69a864bda48ae827a1"
  },
  {
    "task_id": "methods",
    "method_id": "knnr_r",
    "method_name": "KNNR (R)",
    "method_summary": "K-nearest neighbor regression in R.",
    "method_description": "K-nearest neighbor regression in R.",
    "is_baseline": false,
    "references_doi": "10.2307/1403797",
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_predict_modality",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_predict_modality/methods/knnr_r:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_predict_modality/blob/b333268bf19de5c7b9003f69a864bda48ae827a1/src/methods/knnr_r",
    "code_version": "build_main",
    "commit_sha": "b333268bf19de5c7b9003f69a864bda48ae827a1"
  },
  {
    "task_id": "methods",
    "method_id": "lm",
    "method_name": "Linear Model",
    "method_summary": "Linear model regression.",
    "method_description": "A linear model regression method.",
    "is_baseline": false,
    "references_doi": "10.2307/2346786",
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_predict_modality",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_predict_modality/methods/lm:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_predict_modality/blob/b333268bf19de5c7b9003f69a864bda48ae827a1/src/methods/lm",
    "code_version": "build_main",
    "commit_sha": "b333268bf19de5c7b9003f69a864bda48ae827a1"
  },
  {
    "task_id": "methods",
    "method_id": "guanlab_dengkw_pm",
    "method_name": "Guanlab-dengkw",
    "method_summary": "A kernel ridge regression method with RBF kernel.",
    "method_description": "This is a solution developed by Team Guanlab - dengkw in the Neurips 2021 competition to predict one modality\nfrom another using kernel ridge regression (KRR) with RBF kernel. Truncated SVD is applied on the combined\ntraining and test data from modality 1 followed by row-wise z-score normalization on the reduced matrix. The\ntruncated SVD of modality 2 is predicted by training a KRR model on the normalized training matrix of modality 1.\nPredictions on the normalized test matrix are then re-mapped to the modality 2 feature space via the right\nsingular vectors.\n",
    "is_baseline": false,
    "references_doi": "10.1101/2022.04.11.487796",
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/task_predict_modality",
    "documentation_url": null,
    "image": "https://ghcr.io/openproblems-bio/task_predict_modality/methods/guanlab_dengkw_pm:build_main",
    "implementation_url": "https://github.com/openproblems-bio/task_predict_modality/blob/b333268bf19de5c7b9003f69a864bda48ae827a1/src/methods/guanlab_dengkw_pm",
    "code_version": "build_main",
    "commit_sha": "b333268bf19de5c7b9003f69a864bda48ae827a1"
  },
  {
    "task_id": "methods",
    "method_id": "novel",
    "method_name": "Novel",
    "method_summary": "A method using encoder-decoder MLP model",
    "method_description": "This method trains an encoder-decoder MLP model with one output neuron per component in the target. As an input, the encoders use representations obtained from ATAC and GEX data via LSI transform and raw ADT data. The hyperparameters of the models were found via broad hyperparameter search using the Optuna framework.",
    "is_baseline": false,
    "references_doi": "10.1101/2022.04.11.487796",
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/neurips2021_multimodal_topmethods/tree/main/src/predict_modality/methods/novel",
    "documentation_url": "https://github.com/openproblems-bio/neurips2021_multimodal_topmethods/tree/main/src/predict_modality/methods/novel#readme",
    "image": "https://github.com/orgs/openproblems-bio/packages?repo_name=task_predict_modality&q=methods/novel/novel",
    "implementation_url": "https://github.com/openproblems-bio/task_predict_modality/blob/b333268bf19de5c7b9003f69a864bda48ae827a1/src/methods/novel/novel",
    "code_version": "build_main",
    "commit_sha": "b333268bf19de5c7b9003f69a864bda48ae827a1"
  },
  {
    "task_id": "methods",
    "method_id": "simple_mlp",
    "method_name": "Simple MLP",
    "method_summary": "Ensemble of MLPs trained on different sites (team AXX)",
    "method_description": "This folder contains the AXX solution to the OpenProblems-NeurIPS2021 Single-Cell Multimodal Data Integration.\nTeam took the 4th place of the modality prediction task in terms of overall ranking of 4 subtasks: namely GEX\nto ADT, ADT to GEX, GEX to ATAC and ATAC to GEX. Specifically, our methods ranked 3rd in GEX to ATAC and 4th\nin GEX to ADT. More details about the task can be found in the\n[competition webpage](https://openproblems.bio/events/2021-09_neurips/documentation/about_tasks/task1_modality_prediction).\n",
    "is_baseline": false,
    "references_doi": "10.1101/2022.04.11.487796",
    "references_bibtex": null,
    "code_url": "https://github.com/openproblems-bio/neurips2021_multimodal_topmethods/tree/main/src/predict_modality/methods/AXX",
    "documentation_url": "https://github.com/openproblems-bio/neurips2021_multimodal_topmethods/tree/main/src/predict_modality/methods/AXX",
    "image": "https://github.com/orgs/openproblems-bio/packages?repo_name=task_predict_modality&q=methods/simple_mlp/simple_mlp",
    "implementation_url": "https://github.com/openproblems-bio/task_predict_modality/blob/b333268bf19de5c7b9003f69a864bda48ae827a1/src/methods/simple_mlp/simple_mlp",
    "code_version": "build_main",
    "commit_sha": "b333268bf19de5c7b9003f69a864bda48ae827a1"
  }
]
