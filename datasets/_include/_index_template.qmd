![](/images/heros/anndata_schema.png){class="dataset_img"}

```{r load_data}
#| include: false
#| error: true

library(tidyverse)
library(jsonlite)
library(knitr)

# find files
dataset_schemas <- list.files(params$data_dir, full.names = TRUE, pattern = "*.json")

# read dataset metadata
#  -> add shape
metas <- lapply(dataset_schemas, read_json)

# extract metadata
uns <- metas[[1]]$uns
shape <-
  if (length(metas[[1]]$struct$layers) > 0) {
    metas[[1]]$struct$layers[[1]]$shape
  } else {
    NULL
  }
shape_str <- paste(shape, collapse = " × ")

file_size <- sum(sapply(metas, function(x) x$uns$file_size))
file_size_str <- format(
  structure(file_size, class = "object_size"),
  units = "auto",
  standard = "IEC",
  digits = 2
)

struc_names <- c("X", "obs", "var", "obsp", "varp", "obsm", "varm", "layers", "uns")

# collect struct info across files
meta_struc <- list_rbind(map2(
  seq_along(metas),
  metas,
  function(meta_i, meta) {
    list_rbind(map2(
      names(meta$structure),
      meta$structure,
      function(name, slots) {
        if (length(slots) == 0) {
          return(NULL)
        }
        list_rbind(map(
          slots,
          function(li) {
            li$file <- meta_i
            li$struct_name <- name
            # fix rendering of dtype when type is dataframe
            li$dtype <- paste0(li$dtype, collapse = ", ")
            for (n in names(li)) {
              if (is.null(li[[n]])) {
                li[[n]] <- NULL
              } else if (length(li[[n]]) > 1) {
                li[[n]] <- list(li[[n]])
              }
            }
            tibble::as_tibble(li)
          }
        ))
      }
    ))
  }
)) %>%
  mutate(
    shape = map_chr(shape, paste, collapse = " × "),
    description = gsub("\n", " ", description)
  )

```

---
dataset-size: "`r file_size_str`"
date: "`r uns$date_created`"
dimension: "`r shape_str`"
---



```{r quick-links, results='asis'}
#| echo: false
#| column: margin

cat(glue::glue("#### Quick links

<div class='quarto-title-meta-heading'><i class='bi bi-file-earmark-text'></i> [Documentation]({uns$dataset_url})</div>
<div class='quarto-title-meta-heading'><i class='bi bi-globe'></i> [Source]({uns$data_url})</div>
"))


```

```{r related benchmarks, results='asis'}
#| echo: false
#| column: margin

cat("#### Related benchmarks\n")

results_glob <- paste0(params$results_dir, "/*/data/dataset_info.json")
dataset_info_files <- Sys.glob(results_glob)

rel_benchmarks <- NULL

for (file in dataset_info_files) {
  benchm_datasets <- read_json(file)
  benchmark_ok <- FALSE
  for (item in benchm_datasets) {
    if (item$dataset_id == rmarkdown::metadata$`dataset-id`[1]) {
      benchmark_ok <- TRUE
    }
  }

  if (benchmark_ok) {
    parent_dir <- dirname(dirname(file))
    md_link <- paste0('[',basename(parent_dir),'](',parent_dir,')')
    rel_benchmarks <- c(rel_benchmarks, md_link)
  }
}

if (length(rel_benchmarks) == 0) {
  cat("No related benchmarks found.\n")
}

table <- kable(rel_benchmarks,"markdown", col.names = NULL)
print(table)

```

## Description

```{r description, results='asis'}
#| echo: false

cat(uns$dataset_description)

```

```{r schema}
#| echo: false
#| results: "asis"

for (meta_i in seq_along(metas)) {
  # only print heading if there are multiple objects
  if (length(metas) > 1) {
    cat("## Modality ", meta_i, "\n")
  } else {
    cat("## Dataset\n")
  }

  meta <- metas[[meta_i]]
  shape <- meta$struct$layers[[1]]$shape
  shape_str <- paste(shape, collapse = " × ")

  cat("AnnData object with n_obs × n_vars = ", shape_str, "\n\n", sep = "")
  cat("Slots:\n\n")

  for (str_name in struc_names) {
    meta_struc_sel <- meta_struc %>%
      filter(file == meta_i, struct_name == str_name, !is.na(description))
    if (nrow(meta_struc_sel) > 0) {
      slot_str <- paste(
        paste0("[`", meta_struc_sel$name, "`](#mod-", meta_i, "-slots-", str_name, "-", meta_struc_sel$name, "){class=\"quarto-xref\"}"),
        collapse = ", "
      )
      cat("* ", str_name, ": ", slot_str, "  \n", sep = "")
    }
  }

  cat("\n\n")

}
```


:::{.hidden}

```{r slots}
#| echo: false
#| results: "asis"

for (meta_i in seq_along(metas)) {
  # only print heading if there are multiple objects
  if (length(metas) > 1) {
    cat("## Modality ", meta_i, " slots\n")
  } else {
    cat("## Slots\n")
  }

  meta <- metas[[meta_i]]
  shape <- meta$struct$layers[[1]]$shape
  shape_str <- paste(shape, collapse = " × ")


  for (str_name in struc_names) {

    df <- meta_struc %>%
      filter(file == meta_i, struct_name == str_name, !is.na(description))
    if (nrow(df) > 0) {
      
      strs <- paste0(
        "### `.", str_name, "['", df$name, "']` {#mod-", meta_i, "-slots-", str_name, "-", df$name, "}\n\n",

        "Type: `", df$type, "`, data type: `", df$dtype, "`, shape: `", df$shape, "`\n\n",

        df$description, "\n\n"
      )

      cat(paste(strs, collapse = "\n"))
    }
  }


}
```

:::
